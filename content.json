{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/codehezi.github.io/"},"pages":[],"posts":[{"title":"Echarts","slug":"fourteen","date":"2019-09-26T08:24:30.510Z","updated":"2019-09-26T08:25:40.978Z","comments":true,"path":"2019/09/26/fourteen/","link":"","permalink":"http://yoursite.com/2019/09/26/fourteen/","excerpt":"","text":"echarts工具实现页面数据展示12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912012112212312412512612712812913013113213313413513613713813914014114214314414514614714814915015115215315415515615715815916016116216316416516616716816917017117217317417517617717817918018118218318418518618718818919019119219319419519619719819920020120220320420520620720820921021121221321421521621721821922022122222322422522622722822923023123223323423523623723823924024124224324424524624724824925025125225325425525625725825926026126226326426526626726826927027127227327427527627727827928028128228328428528628728828929029129229329429529629729829930030130230330430530630730830931031131231331431531631731831932032132232332432532632732832933033133233333433533633733833934034134234334434534634734834935035135235335435535635735835936036136236336436536636736836937037137237337437537637737837938038138238338438538638738838939039139239339439539639739839940040140240340440540640740840941041141241341441541641741841942042142242342442542642742842943043143243343443543643743843944044144244344444544644744844945045145245345445545645745845946046146246346446546646746846947047147247347447547647747847948048148248348448548648748848949049149249349449549649749849950050150250350450550650750850951051151251351451551651751851952052152252352452552652752852953053153253353453553653753853954054154254354454554654754854955055155255355455555655755855956056156256356456556656756856957057157257357457557657757857958058158258358458558658758858959059159259359459559659759859960060160260360460560660760860961061161261361461561661761861962062162262362462562662762862963063163263363463563663763863964064164264364464564664764864965065165265365465565665765865966066166266366466566666766866967067167267367467567667767867968068168268368468568668768868969069169269369469569669769869970070170270370470570670770870971071171271371471571671771871972072172272372472572672772872973073173273373473573673773873974074174274374474574674774874975075175275375475575675775875976076176276376476576676776876977077177277377477577677777877978078178278378478578678778878979079179279379479579679779879980080180280380480580680780880981081181281381481581681781881982082182282382482582682782882983083183283383483583683783883984084184284384484584684784884985085185285385485585685785885986086186286386486586686786886987087187287387487587687787887988088188288388488588688788888989089189289389489589689789889990090190290390490590690790890991091191291391491591691791891992092192292392492592692792892993093193293393493593693793893994094194294394494594694794894995095195295395495595695795895996096196296396496596696796896997097197297397497597697797897998098198298398498598698798898999099199299399499599699799899910001001100210031004100510061007100810091010101110121013101410151016101710181019102010211022102310241025102610271028102910301031103210331034103510361037103810391040104110421043104410451046104710481049105010511052105310541055105610571058105910601061106210631064106510661067106810691070107110721073107410751076107710781079108010811082108310841085108610871088108910901091109210931094109510961097109810991100110111021103110411051106110711081109111011111112111311141115111611171118111911201121112211231124112511261127112811291130113111321133113411351136113711381139114011411142114311441145114611471148114911501151115211531154115511561157115811591160116111621163116411651166116711681169117011711172117311741175117611771178117911801181118211831184118511861187118811891190119111921193119411951196119711981199120012011202120312041205120612071208120912101211121212131214121512161217121812191220122112221223122412251226122712281229123012311232123312341235123612371238123912401241124212431244124512461247124812491250125112521253125412551256125712581259126012611262126312641265126612671268126912701271127212731274127512761277127812791280128112821283128412851286128712881289129012911292129312941295129612971298129913001301130213031304130513061307130813091310131113121313131413151316131713181319132013211322132313241325132613271328132913301331133213331334133513361337133813391340134113421343134413451346134713481349135013511352135313541355135613571358135913601361136213631364136513661367136813691370137113721373137413751376137713781379138013811382138313841385138613871388138913901391139213931394139513961397139813991400140114021403140414051406140714081409141014111412141314141415141614171418141914201421142214231424142514261427142814291430143114321433143414351436143714381439144014411442144314441445144614471448144914501451145214531454145514561457145814591460146114621463146414651466146714681469147014711472147314741475147614771478147914801481148214831484148514861487148814891490&lt;!DOCTYPE html&gt;&lt;html style=\"height: 100%\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;title&gt;全国和黄冈投资计划&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"js/echarts.js\" &gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"js/jquery.js\" &gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"js/echarts-liquidfill.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"js/huanggang.js\" &gt;&lt;/script&gt; &lt;style type=\"text/css\"&gt; /*#header&#123; background: linear-gradient( to right,rgb(58,66,164),rgb(39,46,101),rgb(44,56,121) ); &#125; */ body&#123; background: linear-gradient( to right,rgb(8,22,49),rgb(23,29,79),rgb(8,22,49) ); &#125; #map&#123; position: absolute; left: 480px; top:148px; &#125; #header&#123; /*margin: auto;*/ /*border: solid blue 1px;*/ /*padding: 0px;*/ /*position: absolute;*/ z-index: 0; &#125; #title&#123; position: absolute; top: 16px; left:576px ; /*border: solid blue 1px;*/ z-index: 1; /*background-color: rgb(68,69,173);*/ &#125; #c1&#123; position: absolute; border: solid rgb(47,51,117) 1px; height: 8%; width: 8%; top: 70px; left: 475px; text-align: center; padding-top: 1px; &#125; #c2&#123; position: absolute; height: 8%; width: 8%; border: solid rgb(47,51,117) 1px; top: 70px; left:610px; text-align: center; padding-top: 1px; &#125; #c3&#123; position: absolute; height: 8%; width: 8%; border: solid rgb(47,51,117) 1px; top: 70px; left: 742px; text-align: center; padding-top: 1px; &#125; #rect&#123; position: absolute; left: 444px; top: 573px; &#125; #leftH&#123; position: absolute; top:18px; text-align: center; padding-top: 16px; height: 5%; width: 8% ; &#125; #rightH1&#123; position: absolute; top:18px; right: 0px; text-align: center; padding-top: 16px; height: 5%; width: 8% ; &#125; #rightH2&#123; position: absolute; top:18px; right: 160px; text-align: center; padding-top: 16px; height: 5%; width: 8% ; &#125; #shuiqiu&#123; position: absolute; right: 0; top: 86px; &#125; #shuiqiu2&#123; position: absolute; right: 0; top: 328px; &#125; #tab&#123; position: absolute; right: -88px; top: 86px; &#125; #kai&#123; position: absolute; top: 166px; right: 240px; &#125; #tab2&#123; position: absolute; right: -2px; top: 328px; &#125; #kai1&#123; position: absolute; top: 390px; right: 250px; &#125; #main1&#123; position: absolute; right: 0; top: 583.9px; &#125; #wenzi&#123; position: absolute; right: -160px; top: 570px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body style=\"height: 100%;margin: 0;\"&gt; &lt;div id=\"c1\"&gt;&lt;span style=\"font-size: 12px;font-weight: bold; color: white;\"&gt;项目个数&lt;/span&gt;&lt;br/&gt;&lt;label style=\"color: orange;font-size: 16px;font-weight: bold;\"&gt;113&lt;/label&gt;&lt;span style=\"color: white;\"&gt;个&lt;/span&gt;&lt;/div&gt; &lt;div id=\"c2\"&gt;&lt;span style=\"font-size: 12px;font-weight: bold;color: white;\"&gt;年度计划投资&lt;/span&gt;&lt;br/&gt;&lt;label style=\"color: skyblue;font-size: 16px;font-weight: bold;\"&gt;149.21&lt;/label&gt;&lt;span style=\"color: white;\"&gt;亿元&lt;/span&gt;&lt;/div&gt; &lt;div id=\"c3\"&gt;&lt;span style=\"font-size: 12px;font-weight: bold;color: white;\"&gt;已完成投资&lt;/span&gt;&lt;br/&gt;&lt;label style=\"color: yellow;font-size: 16px;font-weight: bold;\"&gt;117.92&lt;/label&gt;&lt;span style=\"color: white;\"&gt;亿元&lt;/span&gt;&lt;/div&gt; &lt;div id=\"header\" style=\"height: 10%;width: 40%;margin: auto;\"&gt;&lt;/div&gt; &lt;div id=\"title\" style=\"height: 8%;width: 40%\"&gt;&lt;span style=\"color: white;font-size: 30px;\"&gt;市投资运行监测&lt;/span&gt;&lt;/div&gt; &lt;div id=\"main\" style=\"height: 35.8%;width: 32%;border: solid rgb(30,45,86) 2px;margin-top:20px ;\"&gt;&lt;/div&gt; &lt;div id=\"echart\" style=\"height: 35.5%;width: 32%;border: solid rgb(30,45,86) 2px;margin-top: 18px;\"&gt;&lt;/div&gt; &lt;div id=\"xuanzhuan\" style=\"height: 35.8%;width: 32%;border: solid rgb(30,45,86) 2px;margin-top: 20px;\"&gt;&lt;/div&gt; &lt;div id=\"map\" style=\"height: 60%;width: 30%;\"&gt;&lt;/div&gt; &lt;div id=\"rect\" style=\"height: 35.7%;width: 31%;border: solid rgb(30,45,86) 2px;\"&gt;&lt;/div&gt; &lt;div id=\"leftH\" style=\"border: solid rgb(30,45,86) 2px;\"&gt;&lt;img src=\"img/双向箭头.png\" style=\"height: 15px;\"&gt;&lt;span style=\"color: rgb(70,100,146);\"&gt;填报文字框&lt;/span&gt;&lt;/div&gt; &lt;div id=\"rightH1\" style=\"border: solid rgb(30,45,86) 2px;\"&gt;&lt;img src=\"img/左箭头.png\" style=\"height: 18px;\"&gt;&lt;span style=\"color: rgb(70,100,146);\"&gt;上级菜单&lt;/span&gt;&lt;/div&gt; &lt;div id=\"rightH2\" style=\"border: solid rgb(30,45,86) 2px;\"&gt;&lt;img src=\"img/单左箭头.png\" style=\"height: 18px;\"&gt;&lt;span style=\"color: rgb(70,100,146);\"&gt;投资银行&lt;/span&gt;&lt;/div&gt; &lt;div id=\"shuiqiu\" style=\"height: 35.8%;width: 35%;border: solid rgb(30,45,86) 2px;\"&gt;&lt;/div&gt; &lt;div id=\"shuiqiu2\" style=\"height: 35.8%;width: 35%;border: solid rgb(30,45,86) 2px;\"&gt;&lt;/div&gt; &lt;!--&lt;div id=\"tab\" style=\"height: 30%;width: 30%;\"&gt; &lt;table align=\"center\"&gt; &lt;tr &gt; &lt;td style=\"width: 40px;text-align: right;\" colspan=\"3\"&gt;&lt;span style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;先进制造业项目&lt;/span&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;\" colspan=\"3\"&gt;&lt;img src=\"img/汽车 (2).png\" style=\"height: 18px;\"&gt;&lt;span style=\"color: white;font-size: 20px;\"&gt;25&lt;/span&gt;&lt;label style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;个&lt;/label&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;text-align: right;\" colspan=\"3\"&gt;&lt;span style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;基础设施建设项目&lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;text-align: left;\" colspan=\"3\"&gt;&lt;img src=\"img/公路 (2).png\" style=\"height: 18px;\"&gt;&lt;span style=\"color: white;font-size: 20px;\"&gt;29&lt;/span&gt;&lt;label style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;个&lt;/label&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;text-align: right;\" colspan=\"3\"&gt;&lt;span style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;现代服务业项目&lt;/span&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;\" colspan=\"3\"&gt;&lt;img src=\"img/云智能.png\" style=\"height: 18px;\"&gt;&lt;span style=\"color: white;font-size: 20px;\"&gt;32&lt;/span&gt;&lt;label style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;个&lt;/label&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;text-align: right;\" colspan=\"5\"&gt;&lt;span style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;农业水利和生态环境建设项目&lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;text-align: left;\" colspan=\"3\"&gt;&lt;img src=\"img/正方体.png\" style=\"height: 18px;\"&gt;&lt;span style=\"color: white;font-size: 20px;\"&gt;16&lt;/span&gt;&lt;label style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;个&lt;/label&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt;--&gt; &lt;!--******************************************************--&gt; &lt;!--&lt;div id=\"kai\"&gt;&lt;span style=\"color: white;\"&gt;已开工&lt;br/&gt;&lt;label style=\"color: yellow;font-size: 30px;\"&gt;102&lt;/label&gt;个&lt;/span&gt;&lt;/div&gt;--&gt; &lt;!--******************************************************--&gt; &lt;!--&lt;div id=\"tab2\" style=\"height: 28%;\"&gt; &lt;table align=\"center\"&gt; &lt;tr &gt; &lt;td style=\"width: 40px;text-align: right;\" colspan=\"3\"&gt;&lt;span style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;汽车产业&lt;/span&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;\" colspan=\"3\"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img src=\"img/汽车 (2).png\" style=\"height: 18px;\"&gt;&lt;span style=\"color: white;font-size: 20px;\"&gt;17&lt;/span&gt;&lt;label style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;个&lt;/label&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;text-align: right;\" colspan=\"3\"&gt;&lt;span style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;快速联网&lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;text-align: center;\" colspan=\"3\"&gt;&lt;img src=\"img/公路 (2).png\" style=\"height: 18px;\"&gt;&lt;span style=\"color: white;font-size: 20px;\"&gt;15&lt;/span&gt;&lt;label style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;个&lt;/label&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;text-align: right;\" colspan=\"3\"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;医疗产业&lt;/span&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;\" colspan=\"3\"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img src=\"img/养老 (1).png\" style=\"height: 18px;\"&gt;&lt;span style=\"color: white;font-size: 20px;\"&gt;17&lt;/span&gt;&lt;label style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;个&lt;/label&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;\" colspan=\"2\"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;购物产品&lt;/span&gt;&lt;/td&gt; &lt;td style=\"width: 40px;text-align: right;\" colspan=\"3\"&gt;&lt;span style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;材料行业&lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;\" colspan=\"2\"&gt;&lt;img src=\"img/购物车.png\" style=\"height: 18px;\"&gt;&lt;span style=\"color: white;font-size: 20px;\"&gt;8&lt;/span&gt;&lt;label style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;个&lt;/label&gt;&lt;/td&gt; &lt;td style=\"width: 40px;text-align: center;\" colspan=\"3\"&gt;&lt;img src=\"img/正方体.png\" style=\"height:18px;\"&gt;&lt;span style=\"color: white;font-size: 20px;\"&gt;15&lt;/span&gt;&lt;label style=\"color: rgb(76,111,153);font-size: 13px;\"&gt;个&lt;/label&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr &gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;td style=\"width: 40px;\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt;--&gt; &lt;!--******************************************************--&gt; &lt;!--&lt;div id=\"kai1\"&gt;&lt;span style=\"color: white;\"&gt;已完工&lt;br/&gt;&lt;label style=\"color: yellow;font-size: 30px;\"&gt;71&lt;/label&gt;个&lt;/span&gt;&lt;/div&gt;--&gt; &lt;!-- 作者：he/xie 时间：2019-09-23 描述： --&gt; &lt;div id=\"main1\" style=\"width: 35%;height:33.9%;border: solid rgb(30,45,86) 2px;\"&gt;&lt;/div&gt; &lt;!--&lt;div id=\"wenzi\" style=\"width:30%;height: 30%;text-align: left;\"&gt; &lt;p style=\"color: white;font-size: 24px;\"&gt;待解决问题项目情况&lt;/p&gt; &lt;p style=\"color: rgb(67,96,136);\"&gt;湖此国龙喷水织布&lt;/p&gt; &lt;p style=\"color: rgb(67,96,136);\"&gt;武汉明珠金都家具生产基地&lt;/p&gt; &lt;p style=\"color: rgb(67,96,136);\"&gt;红安县生活垃圾焚烧发电项目&lt;/p&gt; &lt;/div&gt;--&gt; &lt;script type=\"text/javascript\"&gt; var dom=document.getElementById(\"main\"); var myoption=echarts.init(dom); var option=&#123; title:&#123; text:'全市投资增速高于全国平均水平', textStyle: &#123; color:'white', &#125; &#125;, legend: &#123; bottom:'5px', itemGap: 40, show: true, icon: 'circle', data: ['全国(%)','重庆(%)'], textStyle:&#123; color: 'white', fontWeight:'blod', fontSize: 200, &#125; &#125;, xAxis: &#123; type: 'category', boundaryGap: false, data:[&#123;value:'1-2月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-3月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-4月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-5月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-6月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;], axisLine: &#123;//显示坐标轴的线，并将其设置为白色 show:true, lineStyle: &#123; color:'white' &#125; &#125;, splitLine:&#123;//消去x轴的分割线 show:false &#125; &#125;, yAxis: &#123; type:'value', min:'5', max:'7', boundaryGap: false, axisLabel: &#123; color:'white' &#125;, axisLine: &#123;//显示坐标轴的线，并将其设置为白色 show:true, lineStyle: &#123; color:'white' &#125; &#125;, splitLine:&#123;//消去y轴的分割线 show:false &#125; &#125;, series: [ &#123; type:'line', symbol: 'none',//取消折线圆点 smooth: true,//设置平滑的线条 name:'全国(%)', data:[6.1,6.3,6.1,5.3,5.8], itemStyle: &#123;//节点数据显示 normal: &#123; label: &#123; show: true, position: 'right', formatter: [6.1,6.3,6.1,5.3,5.8],//该值动态显示数据，若需固定的文本，则直接写入 fontSize: 16 &#125; &#125; &#125; &#125;, &#123; type:'line', symbol: 'none',//取消折线圆点 name:'重庆(%)', smooth: true,//设置平滑的线条 data:[5.7,6.6,6.4,6,6.1], itemStyle: &#123;//节点数据显示 normal: &#123; label: &#123; show: true, position: 'right', formatter: [6.1,6.3,6.1,5.3,5.8],//该值动态显示数据，若需固定的文本，则直接写入 fontSize: 16 &#125; &#125; &#125; &#125; ], color:['rgb(65,184,163)','rgb(197,136,38)'], &#125; myoption.setOption(option); /************************************************************/ var ech=document.getElementById(\"echart\"); var myoptionEc=echarts.init(ech); var optionEc=&#123; title:&#123; text:'房地产和工业投资势头较好', textStyle: &#123; color:'white', &#125; &#125;, legend: &#123; //x:'bottom', //orient: 'horizontal', bottom:'5px', itemGap: 10, show: true, //icon: 'circle', data: ['总投资(%)','基础设施(%)','工业(%)','房地产(%)'], textStyle:&#123; color: 'white', fontWeight:'blod', fontSize: 200, &#125; &#125;, xAxis: &#123; type: 'category', boundaryGap: true, //boundaryGap: false, data:[&#123;value:'1-2月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-3月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-4月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-5月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-6月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-7月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;], axisLine: &#123;//显示坐标轴的线，并将其设置为白色 show:true, lineStyle: &#123; color:'white' &#125; &#125;, axisLabel: &#123; margin: 10, &#125;, axisTick: &#123; //show: true, alignWithLabel: true, &#125;, splitLine:&#123;//消去x轴的分割线 show:false &#125; &#125;, grid: &#123; top: '14%', left: '10%', right: '10%', bottom: '14%', containLabel: true &#125;, yAxis: &#123; splitNumber: 8, scale: true, type:'value', min:'-6', max:'18', //data:[-6,-3,0,3,6,9,12,15,18], boundaryGap: false, axisLabel: &#123; color:'white' &#125;, axisLine: &#123;//显示坐标轴的线，并将其设置为白色 show:true, lineStyle: &#123; color:'white' &#125; &#125;, splitLine:&#123;//消去y轴的分割线 show:false &#125; &#125;, series: [ &#123; barWidth:13, type:'bar', //symbol: 'none',//取消折线圆点 name:'总投资(%)', smooth: true,//设置平滑的线条 data:[6,6.3,6.3,5.8,6,5.9], itemStyle: &#123;//节点数据显示 //barBorderRadius: 10,// normal:&#123;// barBorderRadius: 16,// // &#125;, emphasis:&#123; barBorderRadius:16 &#125;, normal:&#123; barBorderRadius:16, &#125; &#125; &#125;, &#123; type:'line', symbol: 'none',//取消折线圆点 smooth: true,//设置平滑的线条 name:'基础设施(%)', data:[15,9,12,10,6,6.1],// lineStyle: &#123;// color:'rgb(72,124,38)',// &#125;, itemStyle: &#123;//节点数据显示 normal: &#123; label: &#123; show: true, position: 'right', formatter: [6.1,6.3,6.1,5.3,5.8],//该值动态显示数据，若需固定的文本，则直接写入 fontSize: 16 &#125; &#125; &#125; &#125;, &#123; type:'line', symbol: 'none',//取消折线圆点 name:'工业(%)', smooth: true,//设置平滑的线条 data:[3,6,5.6,6.5,6.2,6.1],// lineStyle: &#123;// color:'rgb(235,160,64)',// &#125;, itemStyle: &#123;//节点数据显示 normal: &#123; label: &#123; show: true, position: 'right', formatter: [6.1,6.3,6.1,5.3,12],//该值动态显示数据，若需固定的文本，则直接写入 fontSize: 16 &#125; &#125; &#125; &#125;, &#123; type:'line', symbol: 'none',//取消折线圆点 name:'房地产(%)', smooth: true,//设置平滑的线条 data:[-5.1,0.2,-0.6,-3.4,-2.4,-3.2], itemStyle: &#123;//节点数据显示 normal: &#123; label: &#123; show: true, position: 'right', formatter: [6.1,6.3,6.1,5.3,12],//该值动态显示数据，若需固定的文本，则直接写入 fontSize: 16 &#125; &#125; &#125; &#125;, ], color:['rgb(74,144,228)','rgb(235,160,64)','rgb(219,241,218)','rgb(72,124,38)'], &#125; myoptionEc.setOption(optionEc); /*************************************************************************/ var domXz=document.getElementById(\"xuanzhuan\"); var myoptionXz=echarts.init(domXz); var optionXz=&#123; title:&#123; text:'审核备项目逐月增加', textStyle: &#123; color:'white', &#125; &#125;, grid: &#123; top: '14%', left: '2%', right: '2%', bottom: '14%', containLabel: true &#125;, legend: &#123; bottom:'5px', itemGap: 40, show: true, //icon: 'circle', data: ['项目个数（个）','投资情况(亿元)'], textStyle:&#123; color: 'white', fontWeight:'blod', fontSize: 200, &#125; &#125;, xAxis: &#123; type: 'category', axisTick: &#123; //show: true, alignWithLabel: true, &#125;, boundaryGap: true, data:[&#123;value:'1-2月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-3月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-4月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-5月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-6月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-7月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;], axisLine: &#123;//显示坐标轴的线，并将其设置为白色 show:true, lineStyle: &#123; color:'white' &#125; &#125;, splitLine:&#123;//消去x轴的分割线 show:false &#125; &#125;, yAxis: [ &#123; splitNumber: 5, scale: true, type:'value', min:0, max:15000, boundaryGap: false, axisLabel: &#123; color:'white', formatter: function(value,index)&#123; for(var i=0;i&lt;=index;i++)&#123; if(value==12000)&#123;value='1.2万'&#125; if(value==15000)&#123;value='1.5万'&#125; &#125; return value; &#125;, &#125;, axisLine: &#123;//显示坐标轴的线，并将其设置为白色 show:true, lineStyle: &#123; color:'white' &#125; &#125;, splitLine:&#123;//消去y轴的分割线 show:false &#125; &#125;,&#123; splitNumber: 5, scale: true, //name:'占比率(%)', type:'value', min:0, max:15000, boundaryGap: false, axisLabel: &#123; color:'white', formatter: function(value,index)&#123; for(var i=0;i&lt;=index;i++)&#123; if(value==12000)&#123;value='1.2万'&#125; if(value==15000)&#123;value='1.5万'&#125; &#125; return value; &#125;, &#125;, axisLine: &#123; show:true, lineStyle: &#123; color:'white' &#125; &#125;, splitLine:&#123; show:false &#125; &#125; ], series: [ &#123; type:'line', //symbol: 'none',//取消折线圆点 //smooth: true,设置平滑的线条 name:'项目个数（个）', data:[2000,3000,6000,9000,12000,15000], itemStyle: &#123;//节点数据显示 normal: &#123; label: &#123; show: true, position: 'bottom', color:'white', formatter: [2000,3000,6000,9000,12000,15000],//该值动态显示数据，若需固定的文本，则直接写入 fontSize: 12 &#125; &#125; &#125; &#125;, &#123; barWidth:13, type:'bar', //symbol: 'none',//取消折线圆点 name:'投资情况(亿元)', //smooth: true,设置平滑的线条 data:[2000,3000,6000,9000,12000,15000], itemStyle: &#123;//节点数据显示 normal: &#123; label: &#123; show: true, position: 'top', color:'white', //formatter: [6.1,6.3,6.1,5.3,5.8],//该值动态显示数据，若需固定的文本，则直接写入 fontSize: 12 &#125; &#125; &#125; &#125; ], color:['rgb(181,129,47)','rgb(65,117,5)'], &#125;; myoptionXz.setOption(optionXz); /*******************************************************/ var domHe=document.getElementById(\"header\"); var myoptionHe=echarts.init(domHe); var optionHe=&#123; title:&#123; //text:'', &#125;, tooltip : &#123; trigger: 'item', /* formatter: '&#123;b&#125;', itemSize:'14px'*/ &#125;, legend:&#123;&#125;, grid: &#123; top:'3%', left: '100%', right: '100%', bottom: '3%', containLabel: true &#125;, xAxis:&#123; min:0, max:5, axisLine: &#123; show:false &#125;, splitLine: &#123; show:false &#125;, axisLabel: &#123; show:false &#125;, axisTick: &#123; show:false &#125; &#125;, yAxis:&#123; min:-5, max:0, axisLine: &#123; show:false &#125;, splitLine: &#123; show:false &#125;, axisLabel: &#123; show:false &#125;, axisTick: &#123; show:false &#125; &#125;, series: [ &#123; type:'line', data:[ [0,0],[1,-5],[2,-5],[3,-5],[4,-5],[5,0] ], lineStyle: &#123; color:'rgb(47,51,117)', &#125;, symbol: 'none',//取消折线圆点 areaStyle:&#123; color: &#123; type: 'linear', x: 0, y: 0, x2: 0, y2: 1, colorStops: [&#123; offset: 0, color: 'rgb(23,29,79)' // 0% 处的颜色 &#125;, &#123; offset: 1, color: 'rgb(68,69,173)' // 100% 处的颜色 &#125;], global: false // 缺省为 false &#125; &#125; &#125; ] &#125; myoptionHe.setOption(optionHe); /*************************************************************************/ var chartMp= echarts.init(document.getElementById('map')); var optionMp=&#123; title:&#123; x:'center', text:'各区县投资增速', textStyle:&#123; color:'white', &#125; &#125;, dataRange: &#123; x: 'left', y: 'bottom', splitList: [ &#123;start: 0.5, label: '高于50%', color: 'green'&#125;, &#123;end: 0.5, label: '低于50%', color: 'orange'&#125;, ], textStyle: &#123; color: 'white', // 值域文字颜色 fontSize: 16, &#125;, selectedMode: true, color: ['#E0022B', '#E09107', '#A3E00B'] &#125;, grid:&#123; left:'100%', right: '100%', containLabel: true, &#125;, series: [&#123; type: 'map', mapLocation: &#123;x: 'right'&#125;, map: 'huanggang', //emphasis:&#123;label:&#123;show:true&#125;&#125; //&#125;, data:[ &#123;name:'红安县', value:0.9&#125;, &#123;name:'麻城市', value:0.6&#125;, &#123;name:'罗田县', value:0.5&#125;, &#123;name:'团风县', value:0.7&#125;, &#123;name:'黄州区', value:0.2&#125;, &#123;name:'浠水县', value:0.35&#125;, &#123;name:'英山县', value:0.26&#125;, &#123;name:'蕲春县', value:0.62&#125;, &#123;name:'武穴市', value:0.82&#125;, &#123;name:'黄梅县', value:0.56&#125;, ] &#125;] &#125; chartMp.setOption(optionMp); /*************************************************************************/ var domRe = document.getElementById(\"rect\"); var myChartRe = echarts.init(domRe); var optionRe = &#123; title:&#123; text:'区县投资完成比率排名', textStyle:&#123; color:'white', &#125; &#125;, //legend: &#123;&#125;, //tooltip: &#123;&#125;, dataset: [&#123; source: [ ['product','浠水县', '麻城市', '蕲春县'], ['团风县',19.01,21.57,17.95], ['英山县',3.49], ['龙感湖',1.18], ] &#125;, &#123;source: [ ['product','浠水县', '麻城市', '蕲春县'], ['团风县',5.90,19.01,21.57,17.95], ['英山县',3.49], ['龙感湖',1.18], ]&#125; ], xAxis: [ &#123; type: 'value', gridIndex: 0, splitLine: &#123; show:false &#125;, axisLabel: &#123; color:'white', &#125;, axisLine: &#123; lineStyle: &#123; color:'white', &#125; &#125;, axisTick: &#123; show:false &#125; &#125;, &#123; type:'value', gridIndex: 1, splitLine: &#123; show:false &#125;, axisLabel: &#123; color:'white', &#125;, axisLine: &#123; lineStyle: &#123; color:'white', &#125; &#125;, axisTick: &#123; show:false &#125; &#125;, ], grid:&#123; bottom:'100', top: '100', containLabel: true, &#125;, yAxis: [ &#123; name:'完成比例前三', type: 'category', gridIndex: 0, splitLine: &#123; show:false &#125;, //nameLocation: 'center', nameTextStyle: &#123; fontSize: 16, &#125;, nameTextStyle: &#123; color:'white', &#125;, axisLabel: &#123; color:'white', &#125;, axisLine: &#123; lineStyle: &#123; color:'white', &#125; &#125;, axisTick: &#123; show:false &#125; &#125;, &#123; name:'完成比例后三', type: 'category', gridIndex: 1, splitLine: &#123; show:false &#125;, nameTextStyle: &#123; fontSize: 16, &#125;, nameTextStyle: &#123; color:'white', &#125;, axisLabel: &#123; color:'white', &#125;, axisLine: &#123; lineStyle: &#123; color:'white', &#125; &#125;, axisTick: &#123; show:false &#125; &#125; ], grid: [ &#123;left: '66%'&#125;, &#123;right: '65%'&#125; ], series: [ // These series are in the first grid. //&#123;type: 'bar', seriesLayoutBy: 'row'&#125;, //&#123;type: 'bar', seriesLayoutBy: 'row'&#125;, &#123; datasetIndex:0, type: 'bar', seriesLayoutBy: 'row', label: &#123; show: true, position: 'right', color: 'white', &#125;, formatter:'&#123;c&#125;', itemStyle: &#123; barBorderRadius: 16,//调整长条边框弧度 color: &#123;//设置渐变色 type: 'linear', x: 0, y: 0, x2: 0, y2: 1, colorStops: [&#123; offset: 0, color: 'rgb(187,227,129)' // 0% 处的颜色 &#125;, &#123; offset: 1, color: 'rgb(75,125,15)' // 100% 处的颜色 &#125;], global: false // 缺省为 false &#125; &#125; &#125;, // These series are in the second grid. //&#123;type: 'bar', xAxisIndex: 1, yAxisIndex: 1&#125;, //&#123;type: 'bar', xAxisIndex: 1, yAxisIndex: 1&#125;, //&#123;type: 'bar', xAxisIndex: 1, yAxisIndex: 1&#125;, &#123; datasetIndex:1, type: 'bar', //seriesLayoutBy: 'row', xAxisIndex: 1, yAxisIndex: 1, label: &#123; show: true, position: 'right', color: 'white', &#125;, formatter:'&#123;c&#125;', itemStyle: &#123; barBorderRadius: 16, color: &#123; type: 'linear', x: 0, y: 0, x2: 0, y2: 1, colorStops: [&#123; offset: 0, color: 'rgb(252,167,40)' // 0% 处的颜色 &#125;, &#123; offset: 1, color: 'rgb(219,4,38)' // 100% 处的颜色 &#125;], global: false // 缺省为 false &#125; &#125; &#125; ] &#125;; myChartRe.setOption(optionRe, true); /*************************************************************************/ var domS=document.getElementById(\"shuiqiu\"); var myoptionS=echarts.init(domS); var optionS=&#123; title:&#123; text:'新开工项目增速放缓', textStyle: &#123; color:'white', &#125; &#125;, grid: &#123; top: '30%', left: '7%', right: '7%', bottom: '6%', containLabel: true &#125;, legend: &#123; //bottom:'0px', itemGap: 2, x:'right', orient: 'vertical', show: true, //icon: 'circle', data: ['新开工项目平均规模（%）','新开工项目总投资(%)','新开工项目个数（%）'], textStyle:&#123; color: 'white', fontWeight:'blod', fontSize: 200, &#125; &#125;, xAxis: &#123; type: 'category', axisTick: &#123; //show: true, alignWithLabel: true, &#125;, boundaryGap: true, data:[&#123;value:'1-2月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-3月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-4月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-5月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-6月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-7月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;], axisLine: &#123;//显示坐标轴的线，并将其设置为白色 show:true, lineStyle: &#123; color:'white' &#125; &#125;, splitLine:&#123;//消去x轴的分割线 show:false &#125; &#125;, yAxis:&#123; splitNumber: 7, scale: true, type:'value', min:-30, max:180, boundaryGap: false, axisLabel: &#123; color:'white' &#125;, axisLine: &#123;//显示坐标轴的线，并将其设置为白色 show:true, lineStyle: &#123; color:'white' &#125; &#125;, splitLine:&#123;//消去y轴的分割线 show:false &#125; &#125;, series: [ &#123; barWidth:13, type:'bar', //symbol: 'none',取消折线圆点 //smooth: true,设置平滑的线条 name:'新开工项目平均规模（%）', data:[161.8,95,20.1,13,4.4,6.6], itemStyle: &#123;//节点数据显示 normal: &#123; label: &#123; show: true, position: 'top', color:'white',// formatter: [2000,3000,6000,9000,12000,15000],//该值动态显示数据，若需固定的文本，则直接写入 fontSize: 12 &#125; &#125; &#125; &#125;, &#123; type:'line', //symbol: 'none',//取消折线圆点 smooth: true,//设置平滑的线条 name:'新开工项目总投资(%)', data:[178,141.3,42.7,28.4,-3.8,-3.22], itemStyle: &#123;//节点数据显示 normal: &#123; label: &#123; color:'white', show: true, position: 'top',// formatter: [2000,3000,6000,9000,12000,15000],//该值动态显示数据，若需固定的文本，则直接写入 fontSize: 12 &#125; &#125; &#125; &#125;, &#123; barWidth:13, type:'bar', //symbol: 'none',//取消折线圆点 name:'新开工项目个数（%）', //smooth: true,设置平滑的线条 data:[4.8,23.7,18.2,13,-2.8,-5.4], itemStyle: &#123;//节点数据显示 normal: &#123; label: &#123; color:'white', show: true, position: 'top',// formatter: [6.1,6.3,6.1,5.3,5.8],//该值动态显示数据，若需固定的文本，则直接写入 fontSize: 12 &#125; &#125; &#125; &#125; ], color:['rgb(245,166,35)','rgb(65,182,163)','rgb(35,183,229)'], &#125; myoptionS.setOption(optionS); /******************************************************************/ var domS2=document.getElementById(\"shuiqiu2\"); var myoptionS2=echarts.init(domS2); var optionS2=&#123; //backgroundColor: '#fff',设置这块区域的背景色 title:&#123; text:'城建和汽摩、医药投资仍旧低迷', textStyle: &#123; color:'white', &#125; &#125;, graphic: [ &#123; type: 'group', left: '68px', bottom: 46, children: [&#123; type: 'image', z: 100,// left: '20',// top: 'middle', style: &#123; image: 'img/长方形.png', &#125; &#125;] &#125;, &#123; type: 'group', left: '100px', bottom: 22, children: [&#123; type: 'text', z: 100,// left: '20',// top: 'middle', style: &#123; fill: 'white', text: '2019年1-7月', font: '12px Microsoft YaHei', &#125; &#125;] &#125;, &#123; type: 'group', left: '280px', bottom: 46, children: [&#123; type: 'image', z: 100,// left: '20',// top: 'middle', style: &#123; image: 'img/长方形.png', &#125; &#125;] &#125;, &#123; type: 'group', left: '312px', bottom: 22, children: [&#123; type: 'text', z: 100,// left: '20',// top: 'middle', style: &#123; fill: 'white', text: '2019年1-7月', font: '12px Microsoft YaHei', &#125; &#125;] &#125;], radar: [ &#123; indicator: [ &#123;text: '基建投资', max: 100,color: 'white'&#125;, &#123;text: '交通', max: 100,color: 'white'&#125;, &#123;text: '城建', max: 100,color: 'white'&#125;, &#123;text: '生态环保', max: 100,color: 'white'&#125;, &#123;text: '公共设施管理业', max: 100,color: 'white'&#125;, &#123;text: '农林水利', max: 100,color: 'white'&#125;, &#123;text: '农林牧渔', max: 100,color: 'white'&#125;, &#123;text: '水利管理', max: 100,color: 'white'&#125;, &#123;text: '邮电', max: 100,color: 'white'&#125; ], center: ['25%','50%'], radius: 40, axisLine: &#123; lineStyle: &#123; color: 'black' &#125; &#125;, splitLine: &#123; lineStyle: &#123; color: 'black' &#125; &#125; &#125;, &#123; indicator: [ &#123;text: '汽车产业', max: 100,color: 'white'&#125;, &#123;text: '摩托车产业', max: 100,color: 'white'&#125;, &#123;text: '电子产业', max: 100,color: 'white'&#125;, &#123;text: '装备产业', max: 100,color: 'white'&#125;, &#123;text: '化工产业', max: 100,color: 'white'&#125;, &#123;text: '医药产业', max: 100,color: 'white'&#125;, &#123;text: '材料产业', max: 100,color: 'white'&#125;, &#123;text: '消费产业', max: 100,color: 'white'&#125;, &#123;text: '能源产业', max: 100,color: 'white'&#125; ], center: ['75%','50%'], radius: 40, axisLine: &#123; lineStyle: &#123; color: 'black' &#125; &#125;, splitLine: &#123; lineStyle: &#123; color: 'black' &#125; &#125; &#125; ], series: [ &#123; type: 'radar', tooltip: &#123; trigger: 'item' &#125;, itemStyle:&#123; normal: &#123; color:'rgb(49,167,211)', lineStyle: &#123; color:'rgb(49,167,211)' // 图表中各个图区域的边框线颜色 &#125;, areaStyle: &#123; type: 'default', color: 'rgb(49,167,211)' &#125; &#125; &#125;, data: [ &#123; value: [35,40,0,40,0,75,85,40,50], name: '' &#125; ] &#125;, &#123; type: 'radar', radarIndex: 1, itemStyle: &#123; normal: &#123; color:'rgb(49,167,211)', lineStyle: &#123; color:'rgb(49,167,211)' // 图表中各个图区域的边框线颜色 &#125;, areaStyle: &#123; type: 'default', color: 'rgb(49,167,211)' &#125; &#125; &#125;, data: [ &#123; value: [35,20,35,35,85,20,115,40,40], name: '' &#125; ] &#125; ] &#125; myoptionS2.setOption(optionS2); /**************************************************/ var myChart1 = echarts.init(document.getElementById('main1')); var option1 = &#123; title:&#123; text:'土地购置和房屋新开工面积地位运行', textStyle: &#123; color:'white', &#125; &#125;, grid: &#123; top: '30%', left: '7%', right: '7%', bottom: '6%', containLabel: true &#125;, legend: &#123; //bottom:'0px', itemGap: 2, x:'right', orient: 'vertical', show: true, //icon: 'circle', data: ['销售面积（%）','新开工面积(%)','土地购置面积（%）'], textStyle:&#123; color: 'white', fontWeight:'blod', fontSize: 200, &#125; &#125;, xAxis: &#123; splitNumber: 16, type: 'category', axisTick: &#123; //show: true, alignWithLabel: true, &#125;, boundaryGap: true, data:[&#123;value:'1-2月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'3月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'4月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'5月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'6月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'7月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'8月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'9月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'10月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'11月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'12月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'1-2月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'3月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'4月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'5月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'6月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, &#123;value:'7月',textStyle:&#123;color: 'white',fontWeight:'blod'&#125;&#125;, ], axisLine: &#123;//显示坐标轴的线，并将其设置为白色 show:true, lineStyle: &#123; color:'white' &#125; &#125;, axisLabel: &#123; interval: '0', rotate: -110, &#125;, splitLine:&#123;//消去x轴的分割线 show:false &#125; &#125;, yAxis:&#123; splitNumber: 5, scale: true, type:'value', min:-60, max:90, boundaryGap: false, axisLabel: &#123; color:'white' &#125;, axisLine: &#123;//显示坐标轴的线，并将其设置为白色 show:true, lineStyle: &#123; color:'white' &#125; &#125;, splitLine:&#123;//消去y轴的分割线 show:false &#125; &#125;, series: [ &#123; barWidth:13, type:'bar', //symbol: 'none',取消折线圆点 //smooth: true,设置平滑的线条 name:'销售面积（%）', data:[1.8,-0.3,-1.2,0,-0.1,-0.4,-0.2,0,-0.2,-2.1,1.8,-3.0,3.2,-3.0,3.2,-3.0,3.2], itemStyle: &#123;//节点数据显示 normal: &#123; barBorderRadius:5, label: &#123; //show: true, position: 'top', color:'white',// formatter: [2000,3000,6000,9000,12000,15000],//该值动态显示数据，若需固定的文本，则直接写入 fontSize: 12 &#125; &#125;, &#125; &#125;, &#123; type:'line', //symbol: 'none',//取消折线圆点 smooth: true,//设置平滑的线条 name:'新开工面积(%)', data:[28,80,68,82,42,36,28,31,36,32,34,35,32,46,0.8,0.6,0.9], itemStyle: &#123;//节点数据显示 normal: &#123; label: &#123; color:'white', //show: true, position: 'top',// formatter: [2000,3000,6000,9000,12000,15000],//该值动态显示数据，若需固定的文本，则直接写入 fontSize: 12 &#125; &#125; &#125; &#125;, &#123; barWidth:13, type:'bar', //symbol: 'none',//取消折线圆点 name:'土地购置面积（%）', //smooth: true,设置平滑的线条 data:[-58,-40,-37,-32,-0.8,10,25,10,18,16,17,-32,-20,-23,-40,-38,-40], itemStyle: &#123;//节点数据显示 normal: &#123; barBorderRadius:5, label: &#123; color:'white', //show: true, position: 'top',// formatter: [6.1,6.3,6.1,5.3,5.8],//该值动态显示数据，若需固定的文本，则直接写入 fontSize: 12 &#125; &#125;, &#125; &#125; ], color:['rgb(245,166,36)','rgb(47,94,157)','rgb(161,266,31)'], &#125; myChart1.setOption(option1); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[]},{"title":"springboot整合quartz","slug":"thirteen","date":"2019-08-10T13:23:55.709Z","updated":"2019-08-10T13:25:26.131Z","comments":true,"path":"2019/08/10/thirteen/","link":"","permalink":"http://yoursite.com/2019/08/10/thirteen/","excerpt":"","text":"pom文件123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.10.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.hezi&lt;/groupId&gt; &lt;artifactId&gt;18-springboot-ehcache&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!-- springboot启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- junit启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- schedule的坐 标 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- quartz 的坐标 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt; &lt;artifactId&gt;quartz&lt;/artifactId&gt; &lt;version&gt;2.2.1&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;!-- tx事务管理的jar包 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 启动类12345678910111213141516package com.hezi;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.ComponentScan;import org.springframework.scheduling.annotation.EnableScheduling;/* * @ComponentScan:就是告诉spring去哪里找bean对象进行调用 */@SpringBootApplication@EnableScheduling//@ComponentScan(basePackages= &#123;\"com.hezi.controller\",\"com.hezi.scheduleTest\"&#125;)public class App &#123; public static void main(String[] args) &#123; SpringApplication.run(App.class, args);&#125;&#125; quartz的配置类1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.hezi.quartzConfiguration;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.scheduling.quartz.CronTriggerFactoryBean;import org.springframework.scheduling.quartz.JobDetailFactoryBean;import org.springframework.scheduling.quartz.SchedulerFactoryBean;import com.hezi.quartz.QuartzDemo;@Configurationpublic class quartzConfiguration &#123; @Bean public JobDetailFactoryBean jobDetailFactoryBean() &#123; JobDetailFactoryBean factory=new JobDetailFactoryBean(); factory.setJobClass(QuartzDemo.class); return factory; &#125; // @Bean// public SimpleTriggerFactoryBean simpleTriggerFactoryBean(JobDetailFactoryBean jobDetailFactoryBean) &#123;// SimpleTriggerFactoryBean factory=new SimpleTriggerFactoryBean();// //关联jobdetails// factory.setJobDetail(jobDetailFactoryBean.getObject());// //该参数表示重复的次数// factory.setRepeatCount(4);// //该参数表示执行的时间，毫秒为单位// factory.setRepeatInterval(2000);// return factory;// &#125; @Bean public CronTriggerFactoryBean cronTriggerFactoryBean(JobDetailFactoryBean jobDetailFactoryBean) &#123; CronTriggerFactoryBean factory=new CronTriggerFactoryBean(); factory.setJobDetail(jobDetailFactoryBean.getObject()); factory.setCronExpression(\"0/2 * * * * ?\"); return factory; &#125; @Bean public SchedulerFactoryBean schedulerFactoryBean(CronTriggerFactoryBean cronTriggerFactoryBean,autowired autowired) throws Exception &#123; SchedulerFactoryBean factory=new SchedulerFactoryBean(); //关联trigger factory.setTriggers(cronTriggerFactoryBean.getObject()); factory.setJobFactory(autowired); return factory; &#125;&#125; service层123456789package com.hezi.service;import org.springframework.stereotype.Component;import org.springframework.stereotype.Service;@Servicepublic class demoService &#123; public void test() &#123; System.out.println(\"测试job类的注入\"); &#125;&#125; quartz的demo实例123456789101112131415package com.hezi.quartz;import java.util.Date;import org.quartz.Job;import org.quartz.JobExecutionContext;import org.quartz.JobExecutionException;import org.springframework.beans.factory.annotation.Autowired;import com.hezi.service.demoService;public class QuartzDemo implements Job &#123; @Autowired private demoService demoservice; @Override public void execute(JobExecutionContext arg0) throws JobExecutionException &#123; this.demoservice.test(); &#125;&#125; 注意demoService无法注入进去，因为quartzDemo没有放入spring容器管理，是通过自己的jobfactory来创建的，所以为了能让spring容器能管理这个类，要重写createJobInstance，然后在quartz的配置类中的schedule中设置jobfactory，把换成重写的这个类。 继承AdaptableJobFactory重写createJobInstance123456789101112131415161718package com.hezi.quartzConfiguration;import org.quartz.spi.TriggerFiredBundle;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.config.AutowireCapableBeanFactory;import org.springframework.scheduling.quartz.AdaptableJobFactory;import org.springframework.stereotype.Component;@Component(\"autowired\")public class autowired extends AdaptableJobFactory &#123; @Autowired private AutowireCapableBeanFactory autowireCapableBeanFactory;//这个是spring自动注入的工厂，需要注入进来 @Override protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception &#123; Object obj=super.createJobInstance(bundle); //添加到spring ioc容器中，并注入 this.autowireCapableBeanFactory.autowireBean(obj); return obj; &#125;&#125;","categories":[],"tags":[]},{"title":"Quartz在javase中的简单使用","slug":"twelve","date":"2019-08-09T13:13:09.166Z","updated":"2019-08-09T13:14:26.458Z","comments":true,"path":"2019/08/09/twelve/","link":"","permalink":"http://yoursite.com/2019/08/09/twelve/","excerpt":"","text":"实现类 必须实现JOb接口 1234567891011121314package com.hezi.quartz;import java.util.Date;import org.quartz.Job;import org.quartz.JobExecutionContext;import org.quartz.JobExecutionException;public class QuartzDemo implements Job &#123; /* * 重写的这个方法就是在方法被触发时执行 */ @Override public void execute(JobExecutionContext arg0) throws JobExecutionException &#123; System.out.println(\"测试quartz\"+new Date()); &#125;&#125; 测试类12345678910111213141516171819202122232425262728293031323334353637package com.hezi.quartz;import org.quartz.CronScheduleBuilder;import org.quartz.JobBuilder;import org.quartz.JobDetail;import org.quartz.ScheduleBuilder;import org.quartz.Scheduler;import org.quartz.SchedulerException;import org.quartz.SchedulerFactory;import org.quartz.SimpleScheduleBuilder;import org.quartz.Trigger;import org.quartz.TriggerBuilder;import org.quartz.impl.StdSchedulerFactory;/* * 测试quartz */public class test &#123; public static void main(String[] args) throws Exception &#123; //创建job JobDetail job=JobBuilder.newJob(QuartzDemo.class).build(); //创建trigger /* * trigger的第一种简单方式，使用SSimpleScheduleBuilder这个类中定义好的简单方法进行使用 */ //Trigger trigger=TriggerBuilder.newTrigger().withSchedule(SimpleScheduleBuilder.repeatSecondlyForever()).build(); /* * trigger的第二种方法，就是使用CronScheduleBuilder下的cronSchedule(\"0/2 * * * * ?\")方法，用cron表达式进行自定义 */ Trigger trigger=TriggerBuilder.newTrigger().withSchedule(CronScheduleBuilder.cronSchedule(\"0/2 * * * * ?\")).build(); //放入scheduler Scheduler scheduler=StdSchedulerFactory.getDefaultScheduler(); scheduler.scheduleJob(job, trigger); //启动scheduler scheduler.start(); &#125;&#125;","categories":[],"tags":[]},{"title":"schedule定时器在springboot中的用法","slug":"eleven","date":"2019-08-08T13:31:16.370Z","updated":"2019-08-08T13:32:09.119Z","comments":true,"path":"2019/08/08/eleven/","link":"","permalink":"http://yoursite.com/2019/08/08/eleven/","excerpt":"","text":"pom文件1234567891011121314151617181920212223242526272829&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.10.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.hezi&lt;/groupId&gt; &lt;artifactId&gt;18-springboot-ehcache&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!-- springboot启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- junit启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- schedule的坐 标 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 启动器1234567891011121314151617package com.hezi.controller;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.ComponentScan;import org.springframework.scheduling.annotation.EnableScheduling;/* * @ComponentScan:就是告诉spring去哪里找bean对象进行调用 */@SpringBootApplication@EnableScheduling@ComponentScan(basePackages= &#123;\"com.hezi.controller\",\"com.hezi.scheduleTest\"&#125;)public class App &#123; public static void main(String[] args) &#123; SpringApplication.run(App.class, args);&#125;&#125; 测试类12345678910111213141516171819202122232425262728package com.hezi.scheduleTest;import java.util.Date;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;/* * @Component:将普通的javabean实例化到spring容器中 */@Componentpublic class test &#123; /* *@Scheduled:设定任务定时器 * cron属性: cron表达式：是时间的一个字符串表达形式 * 注意:在cron表达式中，星期和天是有冲突的，所以星期和天一般只选取一个，用“？”做占位符 * 放在哪个位置哪个就空出来不用 * ？:表示占位符 * *:表示任意的时间 * -:表示一个范围（1-3）表示在这范围内都会执行 * ，:逗号，表示和的关系1,3，就表示1和3都会执行 * \"/\":斜杆表示步长，0/2，就表示每两秒执行一次，0是起始值 */ @Scheduled(cron=\"0/3 * * * * ?\") public void scheduledTest() &#123; System.out.println(\"测试schedule\"+new Date()); &#125;&#125;","categories":[],"tags":[]},{"title":"springboot整合ehcache","slug":"ten","date":"2019-08-04T13:18:29.626Z","updated":"2019-08-04T13:19:08.309Z","comments":true,"path":"2019/08/04/ten/","link":"","permalink":"http://yoursite.com/2019/08/04/ten/","excerpt":"","text":"pom文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.10.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.hezi&lt;/groupId&gt; &lt;artifactId&gt;18-springboot-ehcache&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!-- springboot启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- spring data jpa启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- junit启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 连接数据库mysql --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 数据库连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.0.9&lt;/version&gt; &lt;/dependency&gt; &lt;!-- springboot缓存支持启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- ehcache坐标--&gt; &lt;dependency&gt; &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt; &lt;artifactId&gt;ehcache&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; application.properties全局配置文件12345678910111213spring.datasource.driverClassName=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://localhost:3306/student?characterEncoding=UTF-8spring.datasource.username=rootspring.datasource.password=123456spring.datasource.type=com.alibaba.druid.pool.DruidDataSourcespring.jpa.hibernate.ddl-auto=updatespring.jpa.show-sql=true//扫描ehcache的配置文件spring.cache.ehcache.config=ehcache.xml ehcache的配置文件123456789101112131415161718192021222324252627&lt;ehcache xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../config/ehcache.xsd\"&gt; &lt;diskStore path=\"java.io.tmpdir\"/&gt; &lt;defaultCache maxElementsInMemory=\"10000\" eternal=\"false\" timeToIdleSeconds=\"120\" timeToLiveSeconds=\"120\" maxElementsOnDisk=\"10000000\" diskExpiryThreadIntervalSeconds=\"120\" memoryStoreEvictionPolicy=\"LRU\"&gt; &lt;persistence strategy=\"localTempSwap\"/&gt; &lt;/defaultCache&gt; &lt;!-- maxElementsInMemory:表示最多存储的对象数 --&gt; &lt;!-- eternal:表示是否开启持久化 --&gt; &lt;!-- timeToIdleSeconds:表示访问一个对象的间隔时间，超过就会被清除--&gt; &lt;!-- timeToLiveSeconds:表示一个对象的生命周期最长时间--&gt; &lt;Cache name=\"dao\" maxElementsInMemory=\"10000\" eternal=\"false\" timeToIdleSeconds=\"120\" timeToLiveSeconds=\"120\" maxElementsOnDisk=\"10000000\" diskExpiryThreadIntervalSeconds=\"120\" memoryStoreEvictionPolicy=\"LRU\"&gt; &lt;persistence strategy=\"localTempSwap\"/&gt; &lt;/Cache&gt;&lt;/ehcache&gt; 实体类123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.hezi.pojo;import java.io.Serializable;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;@Entity@Table(name=\"t_dao\")public class Dao implements Serializable&#123; @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name=\"did\") private Integer did; @Column(name=\"dname\") private String dname; @Column(name=\"dage\") private Integer dage;public Integer getDid() &#123; return did;&#125;public void setDid(Integer did) &#123; this.did = did;&#125;public String getDname() &#123; return dname;&#125;public void setDname(String dname) &#123; this.dname = dname;&#125;public Integer getDage() &#123; return dage;&#125;public void setDage(Integer dage) &#123; this.dage = dage;&#125;@Overridepublic String toString() &#123; return \"Dao [did=\" + did + \", dname=\" + dname + \", dage=\" + dage + \"]\";&#125;&#125; 接口类的编写123456package com.hezi.Dao;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.JpaSpecificationExecutor;import com.hezi.pojo.Dao;public interface daoRepositoryCache extends JpaRepository&lt;Dao, Integer&gt;, JpaSpecificationExecutor&lt;Dao&gt; &#123;&#125; service层12345678910111213package com.heizi.service;import java.util.List;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import com.hezi.pojo.Dao;public interface daoService &#123; List&lt;Dao&gt; findAll(); Dao findOne(Integer id); void save(Dao dao); Page&lt;Dao&gt; pagingAndSort(Pageable pageable);&#125; serviceimpl层12345678910111213141516171819202122232425262728293031323334353637383940414243package com.hezi.service.impl;import static org.junit.Assert.assertTrue;import java.util.List;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.CacheEvict;import org.springframework.cache.annotation.Cacheable;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Service;import com.heizi.service.daoService;import com.hezi.Dao.daoRepositoryCache;import com.hezi.pojo.Dao;@Servicepublic class daoServiceImpl implements daoService &#123; @Autowired private daoRepositoryCache daoRepositoryCache; @Override @Cacheable(value=\"dao\")//在哪个方法上加上这个注解就表明调用此方法时使用缓存（value值对应的就是在cache中设置的name的值，表示启用那个缓存方法） public List&lt;Dao&gt; findAll() &#123; return this.daoRepositoryCache.findAll(); &#125; @Override @Cacheable(value=\"dao\") public Dao findOne(Integer id) &#123; return this.daoRepositoryCache.findOne(id); &#125; @Override @CacheEvict(value=\"dao\",allEntries=true)//清除缓存 public void save(Dao dao) &#123; this.daoRepositoryCache.save(dao); &#125; @Override //key:给要存储的属性取名进行缓存，不给一默认的#pageable作为key进行缓存 //@Cacheable:对当前对象做缓存处理 @Cacheable(value=\"dao\",key=\"#pageable.pageSize\") public Page&lt;Dao&gt; pagingAndSort(Pageable pageable) &#123; return this.daoRepositoryCache.findAll(pageable); &#125;&#125; 启动类（App）123456789101112131415161718192021package com.hezi.controller;import javax.persistence.Entity;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.autoconfigure.domain.EntityScan;import org.springframework.cache.annotation.EnableCaching;import org.springframework.context.annotation.ComponentScan;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;@SpringBootApplication@ComponentScan(basePackages= &#123;\"com.hezi.controller\",\"com.heizi.service\",\"com.hezi.service.impl\"&#125;)@EntityScan(basePackages= &#123;\"com.hezi.pojo\"&#125;)@EnableJpaRepositories(basePackages= &#123;\"com.hezi.Dao\"&#125;)@EnableCaching //这个就是扫描缓存配置public class App &#123;public static void main(String[] args) &#123; SpringApplication.run(App.class, args);&#125;&#125; 测试类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package com.hezi.test;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import com.heizi.service.daoService;import com.hezi.controller.App;import com.hezi.pojo.Dao;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes= &#123;App.class&#125;)public class test &#123; @Autowired private daoService daoservice; @Test public void TestCache() &#123; Dao d=new Dao(); d.setDage(25); d.setDname(\"小军\"); this.daoservice.save(d); &#125; @Test public void TestCacheGet() &#123; Dao d=this.daoservice.findOne(1); System.out.println(\"第一次\"+d); Dao d1=this.daoservice.findOne(1); System.out.println(\"第二次\"+d1); &#125; @Test public void TestCachePaging() &#123; Pageable page=new PageRequest(0,2); Page&lt;Dao&gt; p=this.daoservice.pagingAndSort(page); System.out.println(\"第一次:\"+p.getTotalElements()); Pageable page1=new PageRequest(1,2); Page&lt;Dao&gt; p1=this.daoservice.pagingAndSort(page1); System.out.println(\"第二次:\"+p.getTotalElements()); &#125; //清除缓存的测试 @Test public void TestCacheFindAll() &#123; System.out.println(\"第一次\"+this.daoservice.findAll().size()); Dao d=new Dao(); d.setDage(24); d.setDname(\"小青\"); this.daoservice.save(d); System.out.println(\"第二次\"+this.daoservice.findAll().size()); &#125;&#125;","categories":[],"tags":[]},{"title":"springboot 整合 spring data (一对多和多对多【整合hibernate】)","slug":"nine","date":"2019-08-03T13:04:59.194Z","updated":"2019-08-03T13:08:33.766Z","comments":true,"path":"2019/08/03/nine/","link":"","permalink":"http://yoursite.com/2019/08/03/nine/","excerpt":"","text":"pom文件 123456789101112131415161718192021222324252627282930313233343536373839&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.10.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.hezi&lt;/groupId&gt; &lt;artifactId&gt;17-springboot-spring-data-jpa2&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!-- springboot启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- spring data jpa启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- junit启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 连接数据库mysql --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 数据库连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.0.9&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; application.xml全局配置文件 12345678910spring.datasource.driverClassName=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://localhost:3306/student?characterEncoding=UTF-8spring.datasource.username=rootspring.datasource.password=123456spring.datasource.type=com.alibaba.druid.pool.DruidDataSourcespring.jpa.hibernate.ddl-auto=updatespring.jpa.show-sql=true pojo类 1 一对多的（User） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364package com.hezi.pojo;import java.io.Serializable;import java.util.HashSet;import java.util.Set;import javax.persistence.CascadeType;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.JoinColumn;import javax.persistence.JoinColumns;import javax.persistence.JoinTable;import javax.persistence.ManyToMany;import javax.persistence.ManyToOne;import javax.persistence.Table;@Entity@Table(name=\"t_users\")public class User implements Serializable&#123; @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name=\"id\") private Integer id; @Column(name=\"age\") private Integer age; @Column(name=\"name\") private String name; @ManyToOne(cascade=CascadeType.PERSIST) //JoinColumn就是用来维护两者之前的关系 @JoinColumn(name=\"role_id\") private Role role;public Integer getId() &#123; return id;&#125;public void setId(Integer id) &#123; this.id = id;&#125;public Integer getAge() &#123; return age;&#125;public void setAge(Integer age) &#123; this.age = age;&#125;public String getName() &#123; return name;&#125;public void setName(String name) &#123; this.name = name;&#125;public Role getRole() &#123; return role;&#125;public void setRole(Role role) &#123; this.role = role;&#125;@Overridepublic String toString() &#123; return \"User [id=\" + id + \", age=\" + age + \", name=\" + name + \"]\";&#125;&#125; 2 （Role） 1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.hezi.pojo;import java.io.Serializable;import java.util.HashSet;import java.util.Set;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.OneToMany;import javax.persistence.Table;@Entity@Table(name=\"t_role\")public class Role implements Serializable&#123; @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name=\"rid\") private Integer rid; @Column(name=\"rname\") private String rname; @OneToMany(mappedBy=\"role\") private Set&lt;User&gt; user=new HashSet&lt;&gt;(); public Set&lt;User&gt; getUser() &#123; return user; &#125; public void setUser(Set&lt;User&gt; user) &#123; this.user = user; &#125; public Integer getRid() &#123; return rid; &#125; public void setRid(Integer rid) &#123; this.rid = rid; &#125; public String getRname() &#123; return rname; &#125; public void setRname(String rname) &#123; this.rname = rname; &#125;&#125; 3 多对多（Roles） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.hezi.pojo;import java.util.HashSet;import java.util.Set;import javax.persistence.CascadeType;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.FetchType;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.JoinColumn;import javax.persistence.JoinTable;import javax.persistence.ManyToMany;import javax.persistence.Table;@Entity@Table(name=\"t_roles\")public class Roles &#123; @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name=\"rid\") private Integer rid; @Column(name=\"rname\") private String rname; @Column(name=\"rstate\") private String rstate; @ManyToMany(cascade=CascadeType.PERSIST,fetch=FetchType.EAGER) //FetchType.EAGER:及时加载 //JoinTable:映射的中间表 //joinColumns:当前表中的主键所关联的中间表的外键 //inverseJoinColumns:另一张表的主键所关联的中间表的外键 @JoinTable(name=\"t_roles_meun\",joinColumns=@JoinColumn(name=\"roles_id\"),inverseJoinColumns=@JoinColumn(name=\"meun_id\")) private Set&lt;Meun&gt; meun=new HashSet&lt;&gt;();public Integer getRid() &#123; return rid;&#125;public void setRid(Integer rid) &#123; this.rid = rid;&#125;public String getRname() &#123; return rname;&#125;public void setRname(String rname) &#123; this.rname = rname;&#125;public String getRstate() &#123; return rstate;&#125;public void setRstate(String rstate) &#123; this.rstate = rstate;&#125;public Set&lt;Meun&gt; getMeun() &#123; return meun;&#125;public void setMeun(Set&lt;Meun&gt; meun) &#123; this.meun = meun;&#125;&#125; 4 （Meun） 1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.hezi.pojo;import java.io.Serializable;import java.util.HashSet;import java.util.Set;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.ManyToMany;import javax.persistence.Table;@Entity@Table(name=\"t_meun\")public class Meun implements Serializable&#123; @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name=\"mid\") private Integer mid; @Column(name=\"mname\") private String mname; @ManyToMany(mappedBy=\"meun\") private Set&lt;Roles&gt; roles=new HashSet&lt;&gt;(); public Integer getMid() &#123; return mid; &#125; public void setMid(Integer mid) &#123; this.mid = mid; &#125; public String getMname() &#123; return mname; &#125; public void setMname(String mname) &#123; this.mname = mname; &#125; public Set&lt;Roles&gt; getRoles() &#123; return roles; &#125; public void setRoles(Set&lt;Roles&gt; roles) &#123; this.roles = roles; &#125;&#125; 测试类 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788package com.hezi.test;import java.util.Set;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import com.hezi.Dao.rolesDao;import com.hezi.Dao.userDao;import com.hezi.controller.App;import com.hezi.pojo.Meun;import com.hezi.pojo.Role;import com.hezi.pojo.Roles;import com.hezi.pojo.User;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes= &#123;App.class&#125;)public class test &#123; @Autowired private userDao userDao; @Autowired private rolesDao rolesDao; /* * 测试一对多添加 */ @Test public void testAdd() &#123; //创建用户 User u=new User(); u.setAge(21); u.setName(\"王六\"); //创建角色 Role r=new Role(); r.setRname(\"项目经理\"); //关联 r.getUser().add(u); u.setRole(r); //保存 this.userDao.save(u); &#125; /* * 测试一对多添加 */ @Test public void testOnetoManyFind() &#123; User u=this.userDao.findOne(1); System.out.println(u.getName()); Role r=u.getRole(); System.out.println(r.getRname()); &#125; /* * 测试多对多 */ @Test public void testManyToMany() &#123; //创建用户 Roles r=new Roles(); r.setRname(\"王六\"); r.setRstate(\"优秀\"); //创建菜单 Meun m=new Meun(); m.setMname(\"主任务\"); Meun m1=new Meun(); m1.setMname(\"次任务\"); //关联 m.getRoles().add(r); m1.getRoles().add(r); r.getMeun().add(m1); r.getMeun().add(m); //保存 this.rolesDao.save(r); &#125; /* * 测试多对多查询 */ @Test public void testFind() &#123; Roles roles=this.rolesDao.findOne(2); System.out.println(roles.getRname()); Set&lt;Meun&gt; set=roles.getMeun(); for (Meun meun : set) &#123; System.out.println(meun.getMname()); &#125; &#125;&#125; 注意：这里多对多的操作在查询的时候可能会出现session关闭的现象，这个是由于hibernate默认是懒加载的原因，在执行多对多通过一个表查询另一个表的数据时要加上”fetch=FetchType.EAGER”，将延时加载改为及时加载，这样就可以消除session关闭的异常.","categories":[],"tags":[]},{"title":"springboot 整合spring data jpa（接口类编写）","slug":"eight","date":"2019-08-02T13:46:22.603Z","updated":"2019-08-02T13:51:00.728Z","comments":true,"path":"2019/08/02/eight/","link":"","permalink":"http://yoursite.com/2019/08/02/eight/","excerpt":"","text":"PagingAndSortingRepostory接口的编写 pom文件 123456789101112131415161718192021222324252627282930313233343536373839&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.10.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.hezi&lt;/groupId&gt; &lt;artifactId&gt;17-springboot-spring-data-jpa&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!-- springboot启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- spring data jpa启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- junit启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 连接数据库mysql --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 数据库连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.0.9&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; application.xml 1234567891011spring.datasource.driverClassName=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://localhost:3306/student?characterEncoding=UTF-8spring.datasource.username=rootspring.datasource.password=123456spring.datasource.type=com.alibaba.druid.pool.DruidDataSourcespring.jpa.hibernate.ddl-auto=updatespring.jpa.show-sql=true 接口编写 12345678package com.hezi.Dao;import org.springframework.data.repository.PagingAndSortingRepository;import com.hezi.pojo.User;/* * 测试PagingAndSortingRepository接口 */public interface userPagingAndSortingRepository extends PagingAndSortingRepository&lt;User, Integer&gt; &#123;&#125; 此接口继承的CrudRepository的接口，所以具备了它所有的方法，同时他还有自己的两个方法： findAll(sort) findAll(Pageable) 启动类 123456789101112131415package com.hezi.controller;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.autoconfigure.domain.EntityScan;import org.springframework.context.annotation.ComponentScan;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;@SpringBootApplication@ComponentScan(basePackages= &#123;\"com.hezi.controller\"&#125;)@EnableJpaRepositories(basePackages= &#123;\"com.hezi.Dao\"&#125;)@EntityScan(basePackages= &#123;\"com.hezi.pojo\"&#125;)public class App &#123; public static void main(String[] args) &#123; SpringApplication.run(App.class, args);&#125;&#125; 实体类 1234567891011121314151617181920212223242526272829303132333435363738394041package com.hezi.pojo;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;@Entity@Table(name=\"t_user\")public class User &#123; @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name=\"id\") private Integer id; @Column(name=\"age\") private Integer age; @Column(name=\"name\") private String name;public Integer getId() &#123; return id;&#125;public void setId(Integer id) &#123; this.id = id;&#125;public Integer getAge() &#123; return age;&#125;public void setAge(Integer age) &#123; this.age = age;&#125;public String getName() &#123; return name;&#125;public void setName(String name) &#123; this.name = name;&#125;@Overridepublic String toString() &#123; return \"User [id=\" + id + \", age=\" + age + \", name=\" + name + \"]\";&#125;&#125; 测试类 123456789101112131415161718192021222324@Test public void userPagingAndSortingRepositoryTest() &#123; //Order定义排序规则 //前面的是排序规则，后面是针对那一个字段进行排序 Order order=new Order(Direction.DESC,\"id\"); //sort封装了排序规则 Sort sort=new Sort(order); List&lt;User&gt; list=(List&lt;User&gt;)this.userPagingAndSortingRepository.findAll(sort); for (User user : list) &#123; System.out.println(user); &#125; &#125; @Test public void userPagingAndSortingTest() &#123; Pageable pageable=new PageRequest(0, 1); Page&lt;User&gt; page=this.userPagingAndSortingRepository.findAll(pageable); List&lt;User&gt; list=page.getContent(); System.out.println(page.getTotalPages()); System.out.println(page.getTotalElements()); System.out.println(page.getSize());//当前页大小 for (User user : list) &#123; System.out.println(user); &#125; &#125; JpaSpecificationExecutor接口的编写 接口编写 1234567891011package com.hezi.Dao;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.JpaSpecificationExecutor;import com.hezi.pojo.User;/** * 测试JpaSpecificationExecutor这个接口 * @author hezi * */public interface userRepositoryJpaSipacificatonExectuor extends JpaRepository&lt;User, Integer&gt;, JpaSpecificationExecutor&lt;User&gt; &#123;&#125; 注意：这个接口是一个单独的接口并没有继承之前的接口，一般都是与JpaRepository接口一起使用 实体类，启动类，pom文件,application.xml都使用上面的文件 测试类 12345678910111213141516171819202122232425262728@Test public void testjpaSpecificationExectour() &#123; Specification&lt;User&gt; spec=new Specification&lt;User&gt;() &#123; @Override public Predicate toPredicate(Root&lt;User&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb) &#123; Predicate pre= cb.equal(root.get(\"name\") ,\"李四\"); Predicate pre1= cb.equal(root.get(\"name\") ,\"张三\"); return cb.or(pre,pre1); &#125;&#125;; List&lt;User&gt; list=this.userRepositoryJpaSipacificatonExectuor.findAll(spec); for (User user : list) &#123; System.out.println(user);&#125; &#125; @Test public void testjpaSpecificationExectour1() &#123; Specification&lt;User&gt; spec=new Specification&lt;User&gt;() &#123; @Override public Predicate toPredicate(Root&lt;User&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb) &#123; return cb.or(cb.equal(root.get(\"name\") ,\"李四\"),cb.equal(root.get(\"age\") ,25)); &#125;&#125;; List&lt;User&gt; list=this.userRepositoryJpaSipacificatonExectuor.findAll(spec); for (User user : list) &#123; System.out.println(user);&#125; &#125; 通过重写predicate方法来实现查询","categories":[],"tags":[]},{"title":"springboot整合freemarker","slug":"第七个","date":"2019-08-01T10:09:49.083Z","updated":"2019-08-01T10:14:15.392Z","comments":true,"path":"2019/08/01/第七个/","link":"","permalink":"http://yoursite.com/2019/08/01/第七个/","excerpt":"","text":"pom文件12345678910111213141516171819202122232425262728293031323334&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.10.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.hezi&lt;/groupId&gt; &lt;artifactId&gt;01-springboot-freemark&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;!-- springboot启动器 --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- freemarker启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- jstl 坐标--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- jasper 坐标 scop标签的provided表示编译需要而发布不要--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; application.properties全局配置文件1234spring.http.multipart.maxFileSize=200MBspring.http.multipart.maxRequestSize=200MBspring.mvc.view.prefix=/WEB-INF/jsp/spring.mvc.view.suffix=.jsp 文件说明： maxFileSize：说明上传文件的大小200MB maxRequestSize:说明上床文件的总大小200MB prefix：视图的前缀（这个前缀就说明需要在webroot目录的WEB-INF下建一个jsp的文件夹） suffix：视图后缀 实体类1234567891011121314151617package com.hezi.pojo;public class user &#123; private String name; private int age;public String getName() &#123; return name;&#125;public void setName(String name) &#123; this.name = name;&#125;public int getAge() &#123; return age;&#125;public void setAge(int age) &#123; this.age = age;&#125;&#125; controller12345678910111213141516171819202122232425262728293031323334353637383940package com.hezi.controller;import java.io.File;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import com.hezi.pojo.user;@Controllerpublic class HelloWorld &#123; @RequestMapping(\"/fileupload\") @ResponseBody public Map&lt;String,Object&gt; get(MultipartFile file,HttpServletRequest req)throws Exception&#123; System.out.println(req.getServletContext().getRealPath(\"imge\")); file.transferTo(new File(req.getServletContext().getRealPath(\"imge\"),file.getOriginalFilename())); Map&lt;String,Object&gt; map=new HashMap&lt;String,Object&gt;(); map.put(\"msg\", \"ok\"); return map; &#125; @RequestMapping(\"/showuser\") public String show(Model m)&#123; List&lt;user&gt; list=new ArrayList&lt;user&gt;(); user u=new user(); u.setAge(18); u.setName(\"张三\"); user u1=new user(); u1.setAge(20); u1.setName(\"李四\"); list.add(u); list.add(u1); m.addAttribute(\"list\", list); return \"hello\"; &#125; &#125; 启动类1234567891011package com.hezi.controller;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class App &#123; public static void main(String[] args) &#123; SpringApplication.run(App.class, args);&#125;&#125; 视图（freemarker）1234567891011121314151617181920&lt;html&gt; &lt;head&gt; &lt;title&gt;freemarker&lt;/title&gt; &lt;meta charset=\"utf-8\"/&gt; &lt;/head&gt; &lt;body&gt; &lt;table border=\"1px\" align=\"center\" width=\"50%\"&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;/tr&gt; &lt;#list list as user&gt; &lt;tr&gt; &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt; &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt; &lt;/tr&gt; &lt;/#list&gt; &lt;/table&gt; &lt;/body&gt;&lt;/html&gt; 注意：freemarker是一种ftl文件格式","categories":[],"tags":[]},{"title":"springboot整合spring data jpa(续)","slug":"six-blog","date":"2019-07-31T13:41:29.107Z","updated":"2019-07-31T13:42:55.501Z","comments":true,"path":"2019/07/31/six-blog/","link":"","permalink":"http://yoursite.com/2019/07/31/six-blog/","excerpt":"","text":"Repository接口的注解编写方式 接口编写 1234567891011121314package com.hezi.Dao;import java.util.List;import org.springframework.data.jpa.repository.Query;import org.springframework.data.repository.Repository;import com.hezi.pojo.User;/* * 测试query标签这个方法 */ public interface userRepositoryQuery extends Repository&lt;User,Integer&gt;&#123; @Query(\"from User\")//hql的写法 List&lt;User&gt; findAllQuery(); @Query(value=\"select * from t_user where id=?\",nativeQuery=true)//nativeQuery设置成true是关闭hql语句，默认是以hql语句查找 User findOne(Integer id);&#125; 实体类 1234567891011121314151617181920212223242526272829303132333435363738394041package com.hezi.pojo;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;@Entity@Table(name=\"t_user\")public class User &#123; @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name=\"id\") private Integer id; @Column(name=\"age\") private Integer age; @Column(name=\"name\") private String name;public Integer getId() &#123; return id;&#125;public void setId(Integer id) &#123; this.id = id;&#125;public Integer getAge() &#123; return age;&#125;public void setAge(Integer age) &#123; this.age = age;&#125;public String getName() &#123; return name;&#125;public void setName(String name) &#123; this.name = name;&#125;@Overridepublic String toString() &#123; return \"User [id=\" + id + \", age=\" + age + \", name=\" + name + \"]\";&#125;&#125; 启动类 123456789101112131415package com.hezi.controller;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.autoconfigure.domain.EntityScan;import org.springframework.context.annotation.ComponentScan;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;@SpringBootApplication@ComponentScan(basePackages= &#123;\"com.hezi.controller\"&#125;)@EnableJpaRepositories(basePackages= &#123;\"com.hezi.Dao\"&#125;)@EntityScan(basePackages= &#123;\"com.hezi.pojo\"&#125;)public class App &#123; public static void main(String[] args) &#123; SpringApplication.run(App.class, args);&#125;&#125; 测试类 123456789101112131415/* * 测试Repository的query的注解编写操作测试 */ @Test public void testQueryHql() &#123; List&lt;User&gt; list=this.userRepositoryQuery.findAllQuery(); for (User user : list) &#123; System.out.println(user); &#125; &#125; @Test public void testQuerySql() &#123; User user=this.userRepositoryQuery.findOne(7); System.out.println(user); &#125; CrudReository接口的编写（这个接口继承了Repository的接口） 这接口已经封装了一些方法： 接口编写12345678910package com.hezi.Dao;import org.springframework.data.repository.CrudRepository;import com.hezi.pojo.User;/** * 测试CrudRepository接口 * @author hezi * */public interface userCrudRepository extends CrudRepository&lt;User, Integer&gt; &#123;&#125; 测试类1234567891011121314151617181920212223@Test public void save() &#123; User u=new User(); u.setAge(25); u.setName(\"小红\"); this.userdao.save(u); &#125; @Test public void findone() &#123; User u=this.userdao.findOne(1); System.out.println(u); &#125; @Test public void findall() &#123; List&lt;User&gt; list=this.userdao.findAll(); for (User user : list) &#123; System.out.println(user); &#125;&#125; @Test public void deleteall() &#123; this.userdao.deleteAll(); &#125;","categories":[],"tags":[]},{"title":"springboot整合spring-data-jpa","slug":"five-blog","date":"2019-07-31T11:41:23.951Z","updated":"2019-07-31T13:46:29.252Z","comments":true,"path":"2019/07/31/five-blog/","link":"","permalink":"http://yoursite.com/2019/07/31/five-blog/","excerpt":"","text":"pom文件123456789101112131415161718192021222324252627282930313233343536373839&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.10.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.hezi&lt;/groupId&gt; &lt;artifactId&gt;17-springboot-spring-data-jpa&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!-- springboot启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- spring data jpa启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- junit启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 连接数据库mysql --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 数据库连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.0.9&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; application.properties1234567891011spring.datasource.driverClassName=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://localhost:3306/student?characterEncoding=UTF-8spring.datasource.username=rootspring.datasource.password=123456spring.datasource.type=com.alibaba.druid.pool.DruidDataSource//这个配置是让hibernate的ddl语句完成自动更新spring.jpa.hibernate.ddl-auto=update//这个配置就是为了展示sql语句spring.jpa.show-sql=true 启动器类1234567891011121314151617package com.hezi.controller;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.autoconfigure.domain.EntityScan;import org.springframework.context.annotation.ComponentScan;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;@SpringBootApplication@ComponentScan(basePackages= &#123;\"com.hezi.controller\"&#125;)@EnableJpaRepositories(basePackages= &#123;\"com.hezi.Dao\"&#125;)@EntityScan(basePackages= &#123;\"com.hezi.pojo\"&#125;)public class App &#123; public static void main(String[] args) &#123; SpringApplication.run(App.class, args);&#125;&#125; 注意： @ComponentScan(basePackages= {“com.hezi.controller”})这个是对@controller进行扫描 @EnableJpaRepositories(basePackages= {“com.hezi.Dao”})这是对@Repository进行扫描 @EntityScan(basePackages= {“com.hezi.pojo”})这是对@@Entity进行扫描 如果对jpa的接口进行继承操作报以下错误： 这个错误首先想到的就是包没有被扫描到，拿不到bean对象，这个时候就要注意你的这三个注解是否有写或者有没有写对。实体类1234567891011121314151617181920212223242526272829303132333435363738394041package com.hezi.pojo;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;@Entity@Table(name=\"t_user\")public class User &#123; @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name=\"id\") private Integer id; @Column(name=\"age\") private Integer age; @Column(name=\"name\") private String name;public Integer getId() &#123; return id;&#125;public void setId(Integer id) &#123; this.id = id;&#125;public Integer getAge() &#123; return age;&#125;public void setAge(Integer age) &#123; this.age = age;&#125;public String getName() &#123; return name;&#125;public void setName(String name) &#123; this.name = name;&#125;@Overridepublic String toString() &#123; return \"User [id=\" + id + \", age=\" + age + \", name=\" + name + \"]\";&#125;&#125; 核心接口类： Repository接口 CurdRepository接口 PagingAndSotingRepository接口 JpaRepository接口 JpaSpecificationExectuor接口 123456789101112package com.hezi.Dao;import java.util.List;import org.springframework.data.repository.Repository;import com.hezi.pojo.User;public interface userRepositiry extends Repository&lt;User,Integer&gt; &#123; //根据名字进行查找（注意命名规范：前缀：findBy+字段名（其实也算是条件）） List&lt;User&gt; findByName(String name); //根据id进行查找 List&lt;User&gt; findById(int id); //根据年龄查找 List&lt;User&gt; findByAge(int age);&#125; 这是对第一个接口的编写，repository这个接口提供两种编写方式： 通过名字命名的方式来写（findBy（可以说是前缀）+属性名（首字母大写）+查询条件） 另一种方式下个博客再续测试类123456789101112131415161718192021222324252627282930313233343536373839404142package com.hezi.test;import java.util.List;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import com.hezi.Dao.userDao;import com.hezi.Dao.userRepositiry;import com.hezi.controller.App;import com.hezi.pojo.User;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes= &#123;App.class&#125;)public class test &#123; @Autowired private userRepositiry userRepositiry; @Test//测试的是repository的接口 public void findRepositoryByName() &#123; List&lt;User&gt; u=this.userRepositiry.findByName(\"张三\"); for (User user : u) &#123; System.out.println(user); &#125; &#125; @Test public void findRepositoryById() &#123; List&lt;User&gt; u=this.userRepositiry.findById(3); for (User user : u) &#123; System.out.println(user); &#125; &#125; @Test public void findRepositoryByAge() &#123; List&lt;User&gt; u=this.userRepositiry.findByAge(20); for (User user : u) &#123; System.out.println(user); &#125; &#125;&#125;","categories":[],"tags":[]},{"title":"springboot整合hibernate-validate","slug":"four-blog","date":"2019-07-29T12:15:55.207Z","updated":"2019-07-29T12:16:56.758Z","comments":true,"path":"2019/07/29/four-blog/","link":"","permalink":"http://yoursite.com/2019/07/29/four-blog/","excerpt":"","text":"controller包(启动器也放在此包中）controller类123456789101112131415161718192021222324252627282930package com.hezi.controller;import java.util.ArrayList;import java.util.List;import javax.validation.Valid;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import com.hezi.pojo.user;@Controllerpublic class addUser &#123; @RequestMapping(\"/&#123;page&#125;\") public String show(@PathVariable String page,user user) &#123; return page; &#125; /* * @valid 对user对象开启验证 * @BindingResult 封装了验证的结果 */ @RequestMapping(\"/save\") public String save(@Valid user user,BindingResult result) &#123; System.out.println(user); if(result.hasErrors()) &#123; return \"add\"; &#125; return \"index\"; &#125;&#125; app类123456789101112package com.hezi.controller;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.ComponentScan;@MapperScan(\"com.hezi.mapper\") //扫描mybatis接口@ComponentScan(basePackages= &#123;\"com.hezi.pojo\",\"com.hezi.controller\"&#125;)public class App &#123; public static void main(String[] args) &#123; SpringApplication.run(App.class, args);&#125;&#125; pojo实体类123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.hezi.pojo;import javax.validation.constraints.Max;import javax.validation.constraints.Min;import org.hibernate.validator.constraints.Email;import org.hibernate.validator.constraints.NotBlank;import org.hibernate.validator.constraints.NotEmpty;public class user &#123; @Min(value=18) //判断数值最大值 @Max(value=28) //判断数值最小值 private int uage; @NotBlank //判断不能为空（去首尾空格） private String uname; @NotEmpty //判断不能为空（不去首尾空格，空格也算） private String upass; @Email //判断email格式是否正确 private String email;public int getUage() &#123; return uage;&#125;public void setUage(int uage) &#123; this.uage = uage;&#125;public String getEmail() &#123; return email;&#125;public void setEmail(String email) &#123; this.email = email;&#125;public String getUname() &#123; return uname;&#125;public void setUname(String uname) &#123; this.uname = uname;&#125;public String getUpass() &#123; return upass;&#125;public void setUpass(String upass) &#123; this.upass = upass;&#125;@Overridepublic String toString() &#123; return \"user [uage=\" + uage + \", uname=\" + uname + \", upass=\" + upass + \", email=\" + email + \"]\";&#125;&#125; thymeleaf页面展示12345678910111213141516&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;&lt;title&gt;thymeleaf&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form th:action=\"@&#123;/save&#125;\" method=\"post\"&gt; 姓名：&lt;input type=\"text\" name=\"uname\"/&gt;&lt;font color=\"red\" th:errors=\"$&#123;user.uname&#125;\"&gt;&lt;/font&gt;&lt;br/&gt; 密码：&lt;input type=\"text\" name=\"upass\"/&gt;&lt;font color=\"red\" th:errors=\"$&#123;user.upass&#125;\"&gt;&lt;/font&gt;&lt;br /&gt; 年龄 ：&lt;input type=\"text\" name=\"uage\"/&gt;&lt;font color=\"red\" th:errors=\"$&#123;user.uage&#125;\"&gt;&lt;/font&gt;&lt;br/&gt; 邮箱 ：&lt;input type=\"text\" name=\"email\"/&gt;&lt;font color=\"red\" th:errors=\"$&#123;user.email&#125;\"&gt;&lt;/font&gt;&lt;br/&gt; &lt;input type=\"submit\" value=\"提交\"/&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[]},{"title":"springboot整合spring data redis","slug":"three-blog","date":"2019-07-29T08:58:41.689Z","updated":"2019-07-29T09:03:22.520Z","comments":true,"path":"2019/07/29/three-blog/","link":"","permalink":"http://yoursite.com/2019/07/29/three-blog/","excerpt":"","text":"Controller部分控制器类12345678910package com.hezi.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;public class addUser &#123; @RequestMapping(\"/add\") public String show() &#123; System.out.println(\"hi....ggg..qq\"); return \"list\"; &#125;&#125; App类，这里就放在控制器的包下1234567891011package com.hezi.controller;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.ComponentScan;@SpringBootApplication@ComponentScan(basePackages= &#123;\"com.hezi.RedisConfiguration\",\"com.hezi.controller\",\"com.hezi.pojo\"&#125;)public class App &#123; public static void main(String[] args) &#123; SpringApplication.run(App.class, args);&#125;&#125; 全局异常处理类（这是解决异常方式的其中一种方法）12345678910111213141516171819202122232425package com.hezi.controller;import java.util.Properties;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.HandlerExceptionResolver;import org.springframework.web.servlet.ModelAndView;@Configurationpublic class GlobleException implements HandlerExceptionResolver&#123; @Override public ModelAndView resolveException(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception e) &#123; ModelAndView mv=new ModelAndView(); if(e instanceof ArithmeticException) &#123; mv.setViewName(\"error1\"); &#125; if(e instanceof NullPointerException) &#123; mv.setViewName(\"error2\"); &#125; mv.addObject(\"mv\",e.toString()); return mv; &#125;&#125; pojo类1234567891011121314151617181920212223242526272829303132package com.hezi.pojo;import java.io.Serializable;/* * 实现反序列化 */public class User implements Serializable&#123; private String name; private int age; private int id;public String getName() &#123; return name;&#125;public void setName(String name) &#123; this.name = name;&#125;public int getAge() &#123; return age;&#125;public void setAge(int age) &#123; this.age = age;&#125;public int getId() &#123; return id;&#125;public void setId(int id) &#123; this.id = id;&#125;@Overridepublic String toString() &#123; return \"User [name=\" + name + \", age=\" + age + \", id=\" + id + \"]\";&#125;&#125; 全局配置文件类（这里没有使用application.properties配置，设置连接池和redis链接最好使用application.properties配置）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.hezi.RedisConfiguration;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.StringRedisSerializer;import redis.clients.jedis.JedisPoolConfig;@Configurationpublic class redisConfiguration &#123; /** * 设置连接池配置 * @return */ @Bean public JedisPoolConfig jedisPoolConfig() &#123; JedisPoolConfig config=new JedisPoolConfig(); //最大空限量 config.setMaxIdle(10); //最小空限量 config.setMinIdle(5); //最大连接数 config.setMaxTotal(20); return config; &#125; /** * 链接redis的配置 * @param config * @return */ @Bean public JedisConnectionFactory jedisConnectionFactory(JedisPoolConfig config) &#123; JedisConnectionFactory factory=new JedisConnectionFactory(); //关联连接池的配置对象 factory.setPoolConfig(config); //链接主机ip factory.setHostName(\"127.0.0.1\"); //链接主机端口 factory.setPort(6379); return factory; &#125; /* * redis模板类 */ @Bean public RedisTemplate&lt;String, Object&gt; redisTemplate(JedisConnectionFactory factory)&#123; RedisTemplate&lt;String, Object&gt; template=new RedisTemplate&lt;&gt;(); //设置与与redis配置的关联 template.setConnectionFactory(factory); //设置key值得序列化 template.setKeySerializer(new StringRedisSerializer()); //设置value值得序列化 template.setValueSerializer(new StringRedisSerializer()); return template; &#125;&#125; 测试类（这里以几个序列化类进行举例）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384package com.hezi.test;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import com.hezi.controller.App;import com.hezi.pojo.User;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes= &#123;App.class&#125;)public class test &#123; @Autowired private RedisTemplate&lt;String, Object&gt; redisTemplate; /* * 测试添加数据 */ @Test public void addTest() &#123; this.redisTemplate.opsForValue().set(\"key\", \"value\"); &#125; /* * 测试获取数据 */ @Test public void getTest() &#123; String key=(String)this.redisTemplate.opsForValue().get(\"key\"); &#125; /* * 测试添加一个对象(这种方法添加的对象会先转化成字节流，然后以字符串形式存入，这样在数据库中会以看不懂的字节码显示) */ @Test public void addUserTest() &#123; User user=new User(); user.setAge(12); user.setId(1); user.setName(\"张三\"); /* * 这里需要给一个转换的模板，将这个类进行序列化，然后存入redis */ this.redisTemplate.setValueSerializer(new JdkSerializationRedisSerializer()); this.redisTemplate.opsForValue().set(\"user\", user); &#125; /* * 测试获取一个对象 */ @Test public void getUserTest() &#123; /* * 这里需要给一个转换的模板，将这个类进行反序列化，然后取出redis里存的key对应的值 */ this.redisTemplate.setValueSerializer(new JdkSerializationRedisSerializer()); this.redisTemplate.opsForValue().get(\"user\"); &#125; /* * 测试添加一个对象（以jackson的方式，这个就以字符串的形式讲对象存入redis） */ @Test public void addUserTestJackson() &#123; User user=new User(); user.setAge(12); user.setId(1); user.setName(\"张三\"); /* * 这里需要给一个转换的模板，将这个类转换成字符串存入redis */ this.redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&lt;&gt;(User.class)); this.redisTemplate.opsForValue().set(\"user\", user); &#125; /* * 测试获取一个对象 */ @Test public void getUserTestJackson() &#123; /* * 这里需要给一个转换的模板，将这个类取出来 */ this.redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&lt;&gt;(User.class)); this.redisTemplate.opsForValue().get(\"user\"); &#125;&#125; pom文件123456789101112131415161718192021222324252627282930313233343536373839&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.10.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.hezi&lt;/groupId&gt; &lt;artifactId&gt;12-springboot-junit&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!-- springboot启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- thymeleaf启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- devtools坐标 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!-- spring data redis启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- junit启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 以上是对springboot整合spring data redis的一个小的总结","categories":[],"tags":[]},{"title":"一些常见问题","slug":"two-blog","date":"2019-07-05T11:46:03.820Z","updated":"2019-07-05T12:09:26.827Z","comments":true,"path":"2019/07/05/two-blog/","link":"","permalink":"http://yoursite.com/2019/07/05/two-blog/","excerpt":"","text":"org.apache.catalina.LifecycleException问题解决首先查看一下jar包是否都有，如果jar包没问题，看一下xml配置是否有问题，如果都是正常没有错误的情况下，将项目从Tomcat上移除，然后将Tomcat进行clean一下，再次启动项目就可以正常运行了。springMVC中的model模型model模型中存放的数据就只能在跳转过去的页面使用，类似于request的请求，如果不传递下去也只能在请求页面使用，model模型也是类似特性，所以要想在一次会话中有要使用的数据的话，还是需要引入HttpSession，这是在使用springmvc要注意的点。 在modelMap在Myeclipse中可以使用，在eclipse使用会出现一些问题，在eclipse中一般就是用model模型。","categories":[],"tags":[]},{"title":"关于springmvc和mybatis的配置文件","slug":"first-blog","date":"2019-07-04T14:13:40.724Z","updated":"2019-07-29T10:22:57.469Z","comments":true,"path":"2019/07/04/first-blog/","link":"","permalink":"http://yoursite.com/2019/07/04/first-blog/","excerpt":"","text":"web.xml中的配置： &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\"&gt; &lt;filter&gt; &lt;filter-name&gt;characterEncodingFilter&amp;lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&amp;lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&amp;lt;/param-name&gt; &lt;param-value&gt;utf-8&amp;lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;characterEncodingFilter&amp;lt;/filter-name&gt; &lt;url-pattern&gt;*.do&amp;lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;demo&amp;lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;demo&amp;lt;/servlet-name&gt; &lt;url-pattern&gt;*.do&amp;lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;/web-app&gt; springmvc-servlet.xml文件配置&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"&gt; &lt;context:component-scan base-package=\"com.hezi.Controller\"/&gt; &lt;/beans&gt; mybatis.xml配置文件&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt; &lt;configuration&gt; &lt;environments default=\"default\"&gt; &lt;environment id=\"default\"&gt; &lt;transactionManager type=\"JDBC\"/&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/&gt; &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/student?characterEncoding=utf-8\"/&gt; &lt;property name=\"username\" value=\"root\"/&gt; &lt;property name=\"password\" value=\"123456\"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=\"com/hezi/mapper/mapper.xml\"/&gt; &lt;/mappers&gt; &lt;/configuration&gt; com.hezi.mapper下的映射文件mapper.xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt; &lt;mapper namespace=\"com.hezi.mapper\"&gt; &lt;select id=\"sel\" resultType=\"com.hezi.pojo.User\"&gt; select * from user &lt;/select&gt; &lt;select id=\"sel1\" resultType=\"com.hezi.pojo.U\" parameterType=\"com.hezi.pojo.U\"&gt; select uname,upass from u where uname=#{uname} and upass=#{upass} &lt;/select&gt; &lt;insert id=\"ins\" parameterType=\"com.hezi.pojo.U\"&gt; insert into u values(default,#{uname},#{upass}) &lt;/insert&gt; &lt;/mapper&gt; 需要的jar包","categories":[],"tags":[]},{"title":"博客搭建","slug":"个人博客搭建日志","date":"2019-07-01T02:17:28.604Z","updated":"2019-08-01T06:14:11.258Z","comments":true,"path":"2019/07/01/个人博客搭建日志/","link":"","permalink":"http://yoursite.com/2019/07/01/个人博客搭建日志/","excerpt":"","text":"第一步：注册GitHub账号。 第二步：下载Git和node js。 第三部：打开git bash here命令窗口，下载hexo 命令如下：1npm install -g hexo-cli 第四步：进入任意盘创下的hexo/blog文件下，进入git bash here输入命令初始化hexo，命令： 1hexo init 第五步：安装一些hexo的依赖包，命令如下： 1hexo install 第六步：安装一下hexo依赖的插件，命令如下： 1npm install hexo-deployer-git --save 第七步：在GitHub上创建新的仓库，并且写上Repository name：username.github.io(命名规范)；然后复制仓库地址，在blog文件夹下的-config.yml中找到 1234# Deployment在deploy下配置： type：（前面注意有个空格）git repo：（前面注意有个空格）https://github.com/codehezi/codehezi.github.io.git---这是哪个仓库HTTP地址 branch：（前面注意有个空格）master 第八步：将hexo部署到github上去，命令如下： 1hexo g -d 第九步：访问hexo，命令如下： 1codehezi.github.io","categories":[],"tags":[]}]}