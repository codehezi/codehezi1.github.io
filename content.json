{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/codehezi.github.io/"},"pages":[],"posts":[{"title":"springboot整合spring data jpa(续)","slug":"six-blog","date":"2019-07-31T13:41:29.107Z","updated":"2019-07-31T13:42:55.501Z","comments":true,"path":"2019/07/31/six-blog/","link":"","permalink":"http://yoursite.com/2019/07/31/six-blog/","excerpt":"","text":"Repository接口的注解编写方式 接口编写 1234567891011121314package com.hezi.Dao;import java.util.List;import org.springframework.data.jpa.repository.Query;import org.springframework.data.repository.Repository;import com.hezi.pojo.User;/* * 测试query标签这个方法 */ public interface userRepositoryQuery extends Repository&lt;User,Integer&gt;&#123; @Query(\"from User\")//hql的写法 List&lt;User&gt; findAllQuery(); @Query(value=\"select * from t_user where id=?\",nativeQuery=true)//nativeQuery设置成true是关闭hql语句，默认是以hql语句查找 User findOne(Integer id);&#125; 实体类 1234567891011121314151617181920212223242526272829303132333435363738394041package com.hezi.pojo;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;@Entity@Table(name=\"t_user\")public class User &#123; @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name=\"id\") private Integer id; @Column(name=\"age\") private Integer age; @Column(name=\"name\") private String name;public Integer getId() &#123; return id;&#125;public void setId(Integer id) &#123; this.id = id;&#125;public Integer getAge() &#123; return age;&#125;public void setAge(Integer age) &#123; this.age = age;&#125;public String getName() &#123; return name;&#125;public void setName(String name) &#123; this.name = name;&#125;@Overridepublic String toString() &#123; return \"User [id=\" + id + \", age=\" + age + \", name=\" + name + \"]\";&#125;&#125; 启动类 123456789101112131415package com.hezi.controller;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.autoconfigure.domain.EntityScan;import org.springframework.context.annotation.ComponentScan;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;@SpringBootApplication@ComponentScan(basePackages= &#123;\"com.hezi.controller\"&#125;)@EnableJpaRepositories(basePackages= &#123;\"com.hezi.Dao\"&#125;)@EntityScan(basePackages= &#123;\"com.hezi.pojo\"&#125;)public class App &#123; public static void main(String[] args) &#123; SpringApplication.run(App.class, args);&#125;&#125; 测试类 123456789101112131415/* * 测试Repository的query的注解编写操作测试 */ @Test public void testQueryHql() &#123; List&lt;User&gt; list=this.userRepositoryQuery.findAllQuery(); for (User user : list) &#123; System.out.println(user); &#125; &#125; @Test public void testQuerySql() &#123; User user=this.userRepositoryQuery.findOne(7); System.out.println(user); &#125; CrudReository接口的编写（这个接口继承了Repository的接口） 这接口已经封装了一些方法： 接口编写12345678910package com.hezi.Dao;import org.springframework.data.repository.CrudRepository;import com.hezi.pojo.User;/** * 测试CrudRepository接口 * @author hezi * */public interface userCrudRepository extends CrudRepository&lt;User, Integer&gt; &#123;&#125; 测试类1234567891011121314151617181920212223@Test public void save() &#123; User u=new User(); u.setAge(25); u.setName(\"小红\"); this.userdao.save(u); &#125; @Test public void findone() &#123; User u=this.userdao.findOne(1); System.out.println(u); &#125; @Test public void findall() &#123; List&lt;User&gt; list=this.userdao.findAll(); for (User user : list) &#123; System.out.println(user); &#125;&#125; @Test public void deleteall() &#123; this.userdao.deleteAll(); &#125;","categories":[],"tags":[]},{"title":"springboot整合spring-data-jpa","slug":"five-blog","date":"2019-07-31T11:41:23.951Z","updated":"2019-07-31T13:46:29.252Z","comments":true,"path":"2019/07/31/five-blog/","link":"","permalink":"http://yoursite.com/2019/07/31/five-blog/","excerpt":"","text":"pom文件123456789101112131415161718192021222324252627282930313233343536373839&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.10.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.hezi&lt;/groupId&gt; &lt;artifactId&gt;17-springboot-spring-data-jpa&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!-- springboot启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- spring data jpa启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- junit启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 连接数据库mysql --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- 数据库连接池 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.0.9&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; application.properties1234567891011spring.datasource.driverClassName=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://localhost:3306/student?characterEncoding=UTF-8spring.datasource.username=rootspring.datasource.password=123456spring.datasource.type=com.alibaba.druid.pool.DruidDataSource//这个配置是让hibernate的ddl语句完成自动更新spring.jpa.hibernate.ddl-auto=update//这个配置就是为了展示sql语句spring.jpa.show-sql=true 启动器类1234567891011121314151617package com.hezi.controller;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.autoconfigure.domain.EntityScan;import org.springframework.context.annotation.ComponentScan;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;@SpringBootApplication@ComponentScan(basePackages= &#123;\"com.hezi.controller\"&#125;)@EnableJpaRepositories(basePackages= &#123;\"com.hezi.Dao\"&#125;)@EntityScan(basePackages= &#123;\"com.hezi.pojo\"&#125;)public class App &#123; public static void main(String[] args) &#123; SpringApplication.run(App.class, args);&#125;&#125; 注意： @ComponentScan(basePackages= {“com.hezi.controller”})这个是对@controller进行扫描 @EnableJpaRepositories(basePackages= {“com.hezi.Dao”})这是对@Repository进行扫描 @EntityScan(basePackages= {“com.hezi.pojo”})这是对@@Entity进行扫描 如果对jpa的接口进行继承操作报以下错误： 这个错误首先想到的就是包没有被扫描到，拿不到bean对象，这个时候就要注意你的这三个注解是否有写或者有没有写对。实体类1234567891011121314151617181920212223242526272829303132333435363738394041package com.hezi.pojo;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;@Entity@Table(name=\"t_user\")public class User &#123; @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name=\"id\") private Integer id; @Column(name=\"age\") private Integer age; @Column(name=\"name\") private String name;public Integer getId() &#123; return id;&#125;public void setId(Integer id) &#123; this.id = id;&#125;public Integer getAge() &#123; return age;&#125;public void setAge(Integer age) &#123; this.age = age;&#125;public String getName() &#123; return name;&#125;public void setName(String name) &#123; this.name = name;&#125;@Overridepublic String toString() &#123; return \"User [id=\" + id + \", age=\" + age + \", name=\" + name + \"]\";&#125;&#125; 核心接口类： Repository接口 CurdRepository接口 PagingAndSotingRepository接口 JpaRepository接口 JpaSpecificationExectuor接口 123456789101112package com.hezi.Dao;import java.util.List;import org.springframework.data.repository.Repository;import com.hezi.pojo.User;public interface userRepositiry extends Repository&lt;User,Integer&gt; &#123; //根据名字进行查找（注意命名规范：前缀：findBy+字段名（其实也算是条件）） List&lt;User&gt; findByName(String name); //根据id进行查找 List&lt;User&gt; findById(int id); //根据年龄查找 List&lt;User&gt; findByAge(int age);&#125; 这是对第一个接口的编写，repository这个接口提供两种编写方式： 通过名字命名的方式来写（findBy（可以说是前缀）+属性名（首字母大写）+查询条件） 另一种方式下个博客再续测试类123456789101112131415161718192021222324252627282930313233343536373839404142package com.hezi.test;import java.util.List;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import com.hezi.Dao.userDao;import com.hezi.Dao.userRepositiry;import com.hezi.controller.App;import com.hezi.pojo.User;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes= &#123;App.class&#125;)public class test &#123; @Autowired private userRepositiry userRepositiry; @Test//测试的是repository的接口 public void findRepositoryByName() &#123; List&lt;User&gt; u=this.userRepositiry.findByName(\"张三\"); for (User user : u) &#123; System.out.println(user); &#125; &#125; @Test public void findRepositoryById() &#123; List&lt;User&gt; u=this.userRepositiry.findById(3); for (User user : u) &#123; System.out.println(user); &#125; &#125; @Test public void findRepositoryByAge() &#123; List&lt;User&gt; u=this.userRepositiry.findByAge(20); for (User user : u) &#123; System.out.println(user); &#125; &#125;&#125;","categories":[],"tags":[]},{"title":"springboot整合hibernate-validate","slug":"four-blog","date":"2019-07-29T12:15:55.207Z","updated":"2019-07-29T12:16:56.758Z","comments":true,"path":"2019/07/29/four-blog/","link":"","permalink":"http://yoursite.com/2019/07/29/four-blog/","excerpt":"","text":"controller包(启动器也放在此包中）controller类123456789101112131415161718192021222324252627282930package com.hezi.controller;import java.util.ArrayList;import java.util.List;import javax.validation.Valid;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import com.hezi.pojo.user;@Controllerpublic class addUser &#123; @RequestMapping(\"/&#123;page&#125;\") public String show(@PathVariable String page,user user) &#123; return page; &#125; /* * @valid 对user对象开启验证 * @BindingResult 封装了验证的结果 */ @RequestMapping(\"/save\") public String save(@Valid user user,BindingResult result) &#123; System.out.println(user); if(result.hasErrors()) &#123; return \"add\"; &#125; return \"index\"; &#125;&#125; app类123456789101112package com.hezi.controller;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.ComponentScan;@MapperScan(\"com.hezi.mapper\") //扫描mybatis接口@ComponentScan(basePackages= &#123;\"com.hezi.pojo\",\"com.hezi.controller\"&#125;)public class App &#123; public static void main(String[] args) &#123; SpringApplication.run(App.class, args);&#125;&#125; pojo实体类123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.hezi.pojo;import javax.validation.constraints.Max;import javax.validation.constraints.Min;import org.hibernate.validator.constraints.Email;import org.hibernate.validator.constraints.NotBlank;import org.hibernate.validator.constraints.NotEmpty;public class user &#123; @Min(value=18) //判断数值最大值 @Max(value=28) //判断数值最小值 private int uage; @NotBlank //判断不能为空（去首尾空格） private String uname; @NotEmpty //判断不能为空（不去首尾空格，空格也算） private String upass; @Email //判断email格式是否正确 private String email;public int getUage() &#123; return uage;&#125;public void setUage(int uage) &#123; this.uage = uage;&#125;public String getEmail() &#123; return email;&#125;public void setEmail(String email) &#123; this.email = email;&#125;public String getUname() &#123; return uname;&#125;public void setUname(String uname) &#123; this.uname = uname;&#125;public String getUpass() &#123; return upass;&#125;public void setUpass(String upass) &#123; this.upass = upass;&#125;@Overridepublic String toString() &#123; return \"user [uage=\" + uage + \", uname=\" + uname + \", upass=\" + upass + \", email=\" + email + \"]\";&#125;&#125; thymeleaf页面展示12345678910111213141516&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;&lt;title&gt;thymeleaf&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form th:action=\"@&#123;/save&#125;\" method=\"post\"&gt; 姓名：&lt;input type=\"text\" name=\"uname\"/&gt;&lt;font color=\"red\" th:errors=\"$&#123;user.uname&#125;\"&gt;&lt;/font&gt;&lt;br/&gt; 密码：&lt;input type=\"text\" name=\"upass\"/&gt;&lt;font color=\"red\" th:errors=\"$&#123;user.upass&#125;\"&gt;&lt;/font&gt;&lt;br /&gt; 年龄 ：&lt;input type=\"text\" name=\"uage\"/&gt;&lt;font color=\"red\" th:errors=\"$&#123;user.uage&#125;\"&gt;&lt;/font&gt;&lt;br/&gt; 邮箱 ：&lt;input type=\"text\" name=\"email\"/&gt;&lt;font color=\"red\" th:errors=\"$&#123;user.email&#125;\"&gt;&lt;/font&gt;&lt;br/&gt; &lt;input type=\"submit\" value=\"提交\"/&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[]},{"title":"springboot整合spring data redis","slug":"three-blog","date":"2019-07-29T08:58:41.689Z","updated":"2019-07-29T09:03:22.520Z","comments":true,"path":"2019/07/29/three-blog/","link":"","permalink":"http://yoursite.com/2019/07/29/three-blog/","excerpt":"","text":"Controller部分控制器类12345678910package com.hezi.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;public class addUser &#123; @RequestMapping(\"/add\") public String show() &#123; System.out.println(\"hi....ggg..qq\"); return \"list\"; &#125;&#125; App类，这里就放在控制器的包下1234567891011package com.hezi.controller;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.ComponentScan;@SpringBootApplication@ComponentScan(basePackages= &#123;\"com.hezi.RedisConfiguration\",\"com.hezi.controller\",\"com.hezi.pojo\"&#125;)public class App &#123; public static void main(String[] args) &#123; SpringApplication.run(App.class, args);&#125;&#125; 全局异常处理类（这是解决异常方式的其中一种方法）12345678910111213141516171819202122232425package com.hezi.controller;import java.util.Properties;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.HandlerExceptionResolver;import org.springframework.web.servlet.ModelAndView;@Configurationpublic class GlobleException implements HandlerExceptionResolver&#123; @Override public ModelAndView resolveException(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception e) &#123; ModelAndView mv=new ModelAndView(); if(e instanceof ArithmeticException) &#123; mv.setViewName(\"error1\"); &#125; if(e instanceof NullPointerException) &#123; mv.setViewName(\"error2\"); &#125; mv.addObject(\"mv\",e.toString()); return mv; &#125;&#125; pojo类1234567891011121314151617181920212223242526272829303132package com.hezi.pojo;import java.io.Serializable;/* * 实现反序列化 */public class User implements Serializable&#123; private String name; private int age; private int id;public String getName() &#123; return name;&#125;public void setName(String name) &#123; this.name = name;&#125;public int getAge() &#123; return age;&#125;public void setAge(int age) &#123; this.age = age;&#125;public int getId() &#123; return id;&#125;public void setId(int id) &#123; this.id = id;&#125;@Overridepublic String toString() &#123; return \"User [name=\" + name + \", age=\" + age + \", id=\" + id + \"]\";&#125;&#125; 全局配置文件类（这里没有使用application.properties配置，设置连接池和redis链接最好使用application.properties配置）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.hezi.RedisConfiguration;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.StringRedisSerializer;import redis.clients.jedis.JedisPoolConfig;@Configurationpublic class redisConfiguration &#123; /** * 设置连接池配置 * @return */ @Bean public JedisPoolConfig jedisPoolConfig() &#123; JedisPoolConfig config=new JedisPoolConfig(); //最大空限量 config.setMaxIdle(10); //最小空限量 config.setMinIdle(5); //最大连接数 config.setMaxTotal(20); return config; &#125; /** * 链接redis的配置 * @param config * @return */ @Bean public JedisConnectionFactory jedisConnectionFactory(JedisPoolConfig config) &#123; JedisConnectionFactory factory=new JedisConnectionFactory(); //关联连接池的配置对象 factory.setPoolConfig(config); //链接主机ip factory.setHostName(\"127.0.0.1\"); //链接主机端口 factory.setPort(6379); return factory; &#125; /* * redis模板类 */ @Bean public RedisTemplate&lt;String, Object&gt; redisTemplate(JedisConnectionFactory factory)&#123; RedisTemplate&lt;String, Object&gt; template=new RedisTemplate&lt;&gt;(); //设置与与redis配置的关联 template.setConnectionFactory(factory); //设置key值得序列化 template.setKeySerializer(new StringRedisSerializer()); //设置value值得序列化 template.setValueSerializer(new StringRedisSerializer()); return template; &#125;&#125; 测试类（这里以几个序列化类进行举例）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384package com.hezi.test;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.JdkSerializationRedisSerializer;import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import com.hezi.controller.App;import com.hezi.pojo.User;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes= &#123;App.class&#125;)public class test &#123; @Autowired private RedisTemplate&lt;String, Object&gt; redisTemplate; /* * 测试添加数据 */ @Test public void addTest() &#123; this.redisTemplate.opsForValue().set(\"key\", \"value\"); &#125; /* * 测试获取数据 */ @Test public void getTest() &#123; String key=(String)this.redisTemplate.opsForValue().get(\"key\"); &#125; /* * 测试添加一个对象(这种方法添加的对象会先转化成字节流，然后以字符串形式存入，这样在数据库中会以看不懂的字节码显示) */ @Test public void addUserTest() &#123; User user=new User(); user.setAge(12); user.setId(1); user.setName(\"张三\"); /* * 这里需要给一个转换的模板，将这个类进行序列化，然后存入redis */ this.redisTemplate.setValueSerializer(new JdkSerializationRedisSerializer()); this.redisTemplate.opsForValue().set(\"user\", user); &#125; /* * 测试获取一个对象 */ @Test public void getUserTest() &#123; /* * 这里需要给一个转换的模板，将这个类进行反序列化，然后取出redis里存的key对应的值 */ this.redisTemplate.setValueSerializer(new JdkSerializationRedisSerializer()); this.redisTemplate.opsForValue().get(\"user\"); &#125; /* * 测试添加一个对象（以jackson的方式，这个就以字符串的形式讲对象存入redis） */ @Test public void addUserTestJackson() &#123; User user=new User(); user.setAge(12); user.setId(1); user.setName(\"张三\"); /* * 这里需要给一个转换的模板，将这个类转换成字符串存入redis */ this.redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&lt;&gt;(User.class)); this.redisTemplate.opsForValue().set(\"user\", user); &#125; /* * 测试获取一个对象 */ @Test public void getUserTestJackson() &#123; /* * 这里需要给一个转换的模板，将这个类取出来 */ this.redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&lt;&gt;(User.class)); this.redisTemplate.opsForValue().get(\"user\"); &#125;&#125; pom文件123456789101112131415161718192021222324252627282930313233343536373839&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.10.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.hezi&lt;/groupId&gt; &lt;artifactId&gt;12-springboot-junit&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;!-- springboot启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- thymeleaf启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- devtools坐标 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!-- spring data redis启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- junit启动器 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 以上是对springboot整合spring data redis的一个小的总结","categories":[],"tags":[]},{"title":"一些常见问题","slug":"two-blog","date":"2019-07-05T11:46:03.820Z","updated":"2019-07-05T12:09:26.827Z","comments":true,"path":"2019/07/05/two-blog/","link":"","permalink":"http://yoursite.com/2019/07/05/two-blog/","excerpt":"","text":"org.apache.catalina.LifecycleException问题解决首先查看一下jar包是否都有，如果jar包没问题，看一下xml配置是否有问题，如果都是正常没有错误的情况下，将项目从Tomcat上移除，然后将Tomcat进行clean一下，再次启动项目就可以正常运行了。springMVC中的model模型model模型中存放的数据就只能在跳转过去的页面使用，类似于request的请求，如果不传递下去也只能在请求页面使用，model模型也是类似特性，所以要想在一次会话中有要使用的数据的话，还是需要引入HttpSession，这是在使用springmvc要注意的点。 在modelMap在Myeclipse中可以使用，在eclipse使用会出现一些问题，在eclipse中一般就是用model模型。","categories":[],"tags":[]},{"title":"关于springmvc和mybatis的配置文件","slug":"first-blog","date":"2019-07-04T14:13:40.724Z","updated":"2019-07-29T10:22:57.469Z","comments":true,"path":"2019/07/04/first-blog/","link":"","permalink":"http://yoursite.com/2019/07/04/first-blog/","excerpt":"","text":"web.xml中的配置： &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\"&gt; &lt;filter&gt; &lt;filter-name&gt;characterEncodingFilter&amp;lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&amp;lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&amp;lt;/param-name&gt; &lt;param-value&gt;utf-8&amp;lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;characterEncodingFilter&amp;lt;/filter-name&gt; &lt;url-pattern&gt;*.do&amp;lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;servlet&gt; &lt;servlet-name&gt;demo&amp;lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;demo&amp;lt;/servlet-name&gt; &lt;url-pattern&gt;*.do&amp;lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;/web-app&gt; springmvc-servlet.xml文件配置&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"&gt; &lt;context:component-scan base-package=\"com.hezi.Controller\"/&gt; &lt;/beans&gt; mybatis.xml配置文件&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt; &lt;configuration&gt; &lt;environments default=\"default\"&gt; &lt;environment id=\"default\"&gt; &lt;transactionManager type=\"JDBC\"/&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/&gt; &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/student?characterEncoding=utf-8\"/&gt; &lt;property name=\"username\" value=\"root\"/&gt; &lt;property name=\"password\" value=\"123456\"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=\"com/hezi/mapper/mapper.xml\"/&gt; &lt;/mappers&gt; &lt;/configuration&gt; com.hezi.mapper下的映射文件mapper.xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt; &lt;mapper namespace=\"com.hezi.mapper\"&gt; &lt;select id=\"sel\" resultType=\"com.hezi.pojo.User\"&gt; select * from user &lt;/select&gt; &lt;select id=\"sel1\" resultType=\"com.hezi.pojo.U\" parameterType=\"com.hezi.pojo.U\"&gt; select uname,upass from u where uname=#{uname} and upass=#{upass} &lt;/select&gt; &lt;insert id=\"ins\" parameterType=\"com.hezi.pojo.U\"&gt; insert into u values(default,#{uname},#{upass}) &lt;/insert&gt; &lt;/mapper&gt; 需要的jar包","categories":[],"tags":[]}]}